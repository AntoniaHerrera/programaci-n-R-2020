[
["index.html", "Programación para las Ciencias Sociales Inicio Links importantes Cronograma y materiales del curso", " Programación para las Ciencias Sociales Andrés Cruz 2020-09-11 Inicio Este es el sitio web del curso “Programación para las Ciencias Sociales” (ICP0506), dictado en el Instituto de Ciencia Política UC durante el segundo semestre de 2020. El objetivo del sitio es servir como material de consulta. Todos los proyectos que ejecutemos en RStudio Cloud estarán también compilados aquí, para facilitar su revisión. Links importantes Programa del curso Clases grabadas (acceso con cuenta UC) RStudio Cloud (acceso con cuenta UC) Cronograma y materiales del curso I. Introducción J 2020-08-13 Presentación del programa Ciencia de datos y programación Introducción a R, RStudio y R Markdown Material mínimo Material complementario RStudio. 2018a. Introducción al Lenguaje R: Guía Rápida. RStudio. 2018b. RStudio IDE: Guía Rápida. RStudio. 2014. RMarkdown: Hoja de Referencia. II. Manejo de bases de datos J 2020-08-20, J 2020-08-27 Introducción al tidyverse Carga de bases de datos Manejo de bases de datos Limpieza de bases Material mínimo Material complementario Cruz, A. 2019. Manejo de Datos. RStudio. 2017. Importar Datos: Guía Rápida RStudio. 2018. Transformación de Datos con dplyr: Hoja de referencia. III. Visualización de datos J 2020-09-03, J 2020-09-10 Principios de visualización de datos Introducción a la gramática de gráficos Generación de gráficos en ggplot2 Material mínimo Material complementario Healy, K. 2018. Data Visualization: A Practical Introduction. Cap. 1. Araya, S. 2019. Visualización de Datos. RStudio. 2016. Visualización de Datos usando ggplot2: Guía Rápida. IV. Búsqueda efectiva de ayuda J 2020-09-10 Archivos de ayuda en R. Recursos de apoyo: Google, StackOverflow, GitHub. Construcción de ejemplos mínimos reproducibles (reprex). Material mínimo Material complementario Healy, K. 2018. Data Visualization: A Practical Introduction. Anexo 1.1 Wickham, H. y Grolemund, G. 2017. R for Data Science. Sección 1.6. Mostipak, J. 2018. So You’ve Been Asked to Make a Reprex. Entrega Tarea 1: W 2020-09-16 V. Manejo avanzado de bases de datos J 2020-10-01, J 2020-10-08 Reformulación (pivot) de bases de datos. Recodificación de variables. Combinación (merge) de bases. Material mínimo Material complementario Urdinez, F. y Cruz, A. 2020. Manejo Avanzado de Datos Políticos. RStudio. 2017b. Importar Datos: Guía Rápida. Pág. 2. Bryan, J. 2018. Cheatsheet for dplyr join functions. VI. Análisis de texto J 2020-10-15, J 2020-10-22 Manipulación de cadenas de texto. Expresiones regulares. Introducción al análisis cuantitativo de textos (QTA). Material mínimo Material complementario Wickham, H., y Grolemund, G. 2017. R for Data Science. Cap. 14. Silge, J. y Robinson, D. 2018. Text Mining with R. Caps. 1-3. RStudio. 2017c. Trabajar con Cadenas con stringr: Guía Rápida Entrega Tarea 2: W 2020-10-28 VII. R avanzado J 2020-10-29 Tipos de objeto en R Funciones personalizadas. Iteraciones Material mínimo Material complementario Wickham, H., y Grolemund, G. 2017. R for Data Science. Caps. 19 y 21. RStudio. 2017a. Aplicar Funciones con purrr: Guía Rápida. VIII. Minería de datos J 2020-11-05 Web scraping de sitios web Extracción de datos a partir de APIs. Material mínimo Material complementario Barría, G. 2020. Minería de Datos Web. IX. Datos espaciales y mapas J 2020-11-12 Introducción a datos espaciales con sf. Mapas en ggplot2. Material mínimo Material complementario Escobar, A. y Ortiz, G. 2020. Mapas y Datos Espaciales. Entrega Tarea 3: W 2020-11-18 X. Replicación y generación de reportes J 2020-11-19 Replicación en ciencias sociales. R Markdown para reportes y presentaciones. Material mínimo Material complementario King, G. 1995. Replication, Replication. RStudio. 2014. RMarkdown: Hoja de Referencia. Presentaciones y retroalimentación para el trabajo final: J 2020-11-26 Clase de cierre J 2020-12-03 La comunidad de R Material adicional RStudio de escritorio Material mínimo Material complementario Frick, H., y Daish, A. 2017. R-Ladies Global Community. Entrega del trabajo escrito final: J 2020-12-10 "],
["rbasico.html", "01 - R básico Introducción: comandos y código Paquetes Comandos básicos y tipos de objeto en R Sintaxis de R Markdown Siguiente script", " 01 - R básico Diapositivas de introducción Si quieres correr este script localmente, acá puedes descargar el proyecto comprimido en .zip. Paquetes que necesitas tener instalados antes de comenzar: tidyverse. Este es un script de R Markdown, una forma de registrar nuestro código de R. Sabemos esto por por la extensión .Rmd y todas las opciones que están fijadas más arriba (por ahora no nos concentraremos demasiado en ellas). Antes de comenzar, juguemos un poco con las opciones de RStudio. Vamos a Tools &gt; Global Options &gt; Appearance. Introducción: comandos y código En los scripts de R Markdown el texto plano (como este) nos permite añadir comentarios, explicaciones, etc. Cuando ocupemos código debemos insertarlo en “chunks” o bloques de código, como veremos a continuación. Haremos un bloque de código para ocupar R como una calculadora simple. Podemos correr el código línea por línea con Ctrl/Cmd + Enter, si nuestro teclado está en dicha parte del script. Para correr el chunk completo puedes presionar en el pequeño botón de “Play” en la parte superior derecha o presionar Ctrl/Cmd + Shift + Enter. 1 + 5 ## [1] 6 78878.12 * 8e05 / (12 - 7 + 87.2) # este es un comentario &quot;en línea&quot;, se antecede con un # ## [1] 684408850 Para crear un chunk, debes presionar Ctrl/Cmd + Alt + i. Prueba a crear un chunk y calcula alguna operación aritmética. Tu código: En R podemos crear objetos, que guardarán información para ser utilizada en operaciones siguientes: mi_objeto &lt;- 5 mi_objeto # poner su nombre lo imprime, sin más ## [1] 5 Por ejemplo, podemos hacer aritmética con este nuevo objeto: mi_objeto - 17 ## [1] -12 ¿Cuál es la diferencia entre este último comando y el siguiente? mi_objeto_b &lt;- mi_objeto - 17 Eliminemos este segundo objeto, utilizando la funcion rm() (remove): rm(mi_objeto_b) Si quisiéramos reiniciar la sesión (comenzando todo desde cero), podríamos presionar Session &gt; Restart R) y clickear en la escoba del panel “Environment” de RStudio (superior derecho). Paquetes Los paquetes añaden nuevas funciones a R. Hay que cargarlos en cada nueva sesión, con el comando library(). library(tidyverse) El tidyverse es un paquete que ocuparemos en todas nuestras clases, que añade una gran cantidad de funciones al lenguaje. Ojo! library() solo nos permite cargar paquetes que hayamos instalado. Aquí en RStudio Cloud yo instalé el tidyverse para todas/os, pero por defecto habría que instalarlo. Probemos a utilizar otro paquete, janitor: library(janitor) ## Error in library(janitor) : there is no package called &#39;janitor&#39; Debemos instalarlo. Basta con instalar los paquetes una vez, luego podremos cargarlos en cada sesión que queramos. La mayoría de los paquetes se instalan con el comando install.packages(\"paquete\"): install.packages(&quot;janitor&quot;) Por cierto, podemos saber que R está trabajando gracias a RStudio. Mientras el paquete se instala, fíjate que hay una pequeña línea (¿color?) en la parte izquierda del código. Terminada la instalación, carguemos el nuevo paquete: library(janitor) # ahora el paquete está instalado, por lo que carga sin problemas (Ejercicio A) Prueba a instalar un paquete llamado “fun”. Luego, cárgalo y corre el siguiente comando: random_password(). ¿Qué hace? Recuerda registrar todo el proceso en el script! Tu código: Comandos básicos y tipos de objeto en R En esta sección veremos vectores, data frames (marcos de datos) y listas. Vectores Lo siguiente es un vector numérico: c(7, 9, 19, 2, 9) ## [1] 7 9 19 2 9 El siguiente comando creará un objeto (mi_vector). ¿Qué contendrá este nuevo objeto? mi_vector &lt;- c(2, -3, mi_objeto, 6:9) Veamos algunos comandos básicos a aplicar en números y vectores numéricos. mi_vector[2] # acceder al segundo elemento del vector ## [1] -3 sqrt(x = mi_objeto) # la raíz cuadrada es una función! ## [1] 2.236068 log(x = mi_objeto) # logaritmo natural ## [1] 1.609438 mean(x = mi_vector) # media del vector ## [1] 4.857143 media_mi_vector &lt;- mean(x = mi_vector) # si quisiéramos guardarla como objeto! median(x = mi_vector) # mediana del vector ## [1] 6 sd(x = mi_vector) # desviación estándar del vector ## [1] 4.140393 length(x = mi_vector) # número de elementos del vector ## [1] 7 sum(x = mi_vector) # suma del vector ## [1] 34 min(x = mi_vector) # ¿qué hace esta función? ## [1] -3 max(x = mi_vector) # ¿y esta? ## [1] 9 Todas las funciones que hemos visto simplemente tomaban un objeto, sin más. La mayoría de las funciones son más complejas: requieren más de un objeto o nos permiten integrar más opciones. Les damos instrucciones específicas a las funciones por medio de argumentos (hasta ahora, solo vimos funciones con el inicio de argumento “x =”). sort(x = mi_vector) # ordena el vector de menor a mayor ## [1] -3 2 5 6 7 8 9 sort(x = mi_vector, decreasing = TRUE) # ¿qué cambia con este argumento? ## [1] 9 8 7 6 5 2 -3 Nota que podemos añadir saltos de línea entre argumentos: sort(x = mi_vector, decreasing = TRUE) ## [1] 9 8 7 6 5 2 -3 Importante. Si ponemos los valores de los argumentos en orden, podemos evitar escribir los argumentos mismos: sort(mi_vector, TRUE) # igual resultado que nuestros comandos anteriores ## [1] 9 8 7 6 5 2 -3 Por cierto, podemos consultar el archivo de ayuda de una función fácilmente. Ahí encontraremos los distintos argumentos explicados: ?sort Los vectores también pueden ser de otros tipos: c(&quot;Manzana&quot;, &quot;Pera&quot;, &quot;Naranja&quot;, &quot;Damasco&quot;) # vector de caracteres. Nota las comillas! ## [1] &quot;Manzana&quot; &quot;Pera&quot; &quot;Naranja&quot; &quot;Damasco&quot; nchar(&quot;Manzana&quot;) # cuenta los caracteres de un elemento ## [1] 7 c(TRUE, FALSE, TRUE, TRUE) # vector lógico ## [1] TRUE FALSE TRUE TRUE c(T, F, T, T) ## [1] TRUE FALSE TRUE TRUE (Ejercicio B) De nuevo ocupa la función random_password() del paquete fun, pero esta vez con el argumento length = 10. Prueba con diferentes valores del argumento! Tu código: Data frames (marcos de datos) Los data frames son objetos centrales en R, sin duda los que más utilizaremos. Vamos a cargar uno simple: df_trump_scores &lt;- read_csv(&quot;datos/trump_scores_202003_cong116.csv&quot;) # esta función es del tidyverse! ## Parsed with column specification: ## cols( ## last_name = col_character(), ## state = col_character(), ## party = col_character(), ## trump_score = col_double(), ## trump_margin = col_double() ## ) El “Trump Score” es el porcentaje de votaciones en las que un senador/a ha estado alineado/a con Donald Trump. El “Trump Margin” es el margen que Trump obtuvo en el estado del senador/a en cuestión. Fuente: FiveThirtyEight (2020). Descargado el 11 de marzo de 2020. df_trump_scores # imprime un vistazo rápido ## # A tibble: 100 x 5 ## last_name state party trump_score trump_margin ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Alexander TN R 80 26.0 ## 2 Blunt MO R 84.8 18.6 ## 3 Brown OH D 14.7 8.13 ## 4 Burr NC R 90.3 3.66 ## 5 Baldwin WI D 14.7 0.764 ## 6 Boozman AR R 88.2 26.9 ## 7 Blackburn TN R 93.9 26.0 ## 8 Barrasso WY R 91.2 46.3 ## 9 Bennet CO D 15.4 -4.91 ## 10 Blumenthal CT D 11.8 -13.6 ## # … with 90 more rows head(df_trump_scores) # imprime solo las seis primeras filas ## # A tibble: 6 x 5 ## last_name state party trump_score trump_margin ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Alexander TN R 80 26.0 ## 2 Blunt MO R 84.8 18.6 ## 3 Brown OH D 14.7 8.13 ## 4 Burr NC R 90.3 3.66 ## 5 Baldwin WI D 14.7 0.764 ## 6 Boozman AR R 88.2 26.9 También podemos inspeccionar un data frame clickeando su nombre en el panel superior derecho, pestaña Environment. Las columnas de un data frame son vectores! df_trump_scores$last_name ## [1] &quot;Alexander&quot; &quot;Blunt&quot; &quot;Brown&quot; &quot;Burr&quot; &quot;Baldwin&quot; &quot;Boozman&quot; &quot;Blackburn&quot; &quot;Barrasso&quot; &quot;Bennet&quot; &quot;Blumenthal&quot; &quot;Booker&quot; &quot;Braun&quot; &quot;Cantwell&quot; &quot;Cardin&quot; &quot;Carper&quot; &quot;Crapo&quot; ## [17] &quot;Collins&quot; &quot;Capito&quot; &quot;Cornyn&quot; &quot;Casey&quot; &quot;Cassidy&quot; &quot;Coons&quot; &quot;Cotton&quot; &quot;Cramer&quot; &quot;Cruz&quot; &quot;Cortez Masto&quot; &quot;Durbin&quot; &quot;Daines&quot; &quot;Duckworth&quot; &quot;Enzi&quot; &quot;Ernst&quot; &quot;Feinstein&quot; ## [33] &quot;Fischer&quot; &quot;Graham&quot; &quot;Grassley&quot; &quot;Gillibrand&quot; &quot;Gardner&quot; &quot;Hirono&quot; &quot;Heinrich&quot; &quot;Hoeven&quot; &quot;Harris&quot; &quot;Hassan&quot; &quot;Hyde-Smith&quot; &quot;Hawley&quot; &quot;Inhofe&quot; &quot;Johnson&quot; &quot;Jones&quot; &quot;Klobuchar&quot; ## [49] &quot;King&quot; &quot;Kaine&quot; &quot;Kennedy&quot; &quot;Leahy&quot; &quot;Lankford&quot; &quot;Lee&quot; &quot;Loeffler&quot; &quot;Markey&quot; &quot;McConnell&quot; &quot;Menendez&quot; &quot;Moran&quot; &quot;Murray&quot; &quot;Murkowski&quot; &quot;Murphy&quot; &quot;Merkley&quot; &quot;Manchin&quot; ## [65] &quot;McSally&quot; &quot;Portman&quot; &quot;Peters&quot; &quot;Paul&quot; &quot;Perdue&quot; &quot;Reed&quot; &quot;Roberts&quot; &quot;Risch&quot; &quot;Rubio&quot; &quot;Rounds&quot; &quot;Rosen&quot; &quot;Romney&quot; &quot;Sanders&quot; &quot;Schumer&quot; &quot;Shelby&quot; &quot;Stabenow&quot; ## [81] &quot;Shaheen&quot; &quot;Scott&quot; &quot;Sinema&quot; &quot;Schatz&quot; &quot;Sasse&quot; &quot;Sullivan&quot; &quot;Smith&quot; &quot;Scott&quot; &quot;Thune&quot; &quot;Toomey&quot; &quot;Tester&quot; &quot;Tillis&quot; &quot;Udall&quot; &quot;Van Hollen&quot; &quot;Wicker&quot; &quot;Wyden&quot; ## [97] &quot;Whitehouse&quot; &quot;Warner&quot; &quot;Warren&quot; &quot;Young&quot; df_trump_scores$trump_score ## [1] 80.000000 84.848485 14.705882 90.322581 14.705882 88.235294 93.939394 91.176471 15.384615 11.764706 4.166667 94.117647 15.151515 15.151515 11.764706 93.548387 41.176471 93.939394 91.176471 20.588235 84.848485 14.705882 ## [23] 82.352941 90.909091 93.750000 11.764706 18.181818 79.411765 16.129032 90.909091 91.176471 14.705882 88.235294 76.666667 91.176471 7.692308 83.870968 14.705882 20.588235 91.176471 4.545455 14.705882 91.176471 85.294118 ## [45] 90.909091 91.176471 21.212121 7.692308 17.647059 14.705882 88.235294 14.705882 88.235294 63.636364 100.000000 8.823529 91.176471 11.764706 57.575758 14.705882 56.250000 17.647059 11.764706 32.352941 91.176471 84.848485 ## [67] 14.705882 60.714286 92.857143 8.823529 91.176471 90.625000 81.250000 92.857143 12.500000 79.411765 5.263158 11.764706 91.176471 14.705882 14.705882 87.500000 24.242424 11.764706 87.500000 90.322581 17.647059 91.176471 ## [89] 91.176471 84.375000 11.764706 88.235294 17.647059 14.705882 85.294118 8.823529 9.375000 14.705882 9.090909 64.705882 Producto de esto, podemos operar en ellas usando las funciones que aprendimos antes. (Ejercicio C) Calcula la mediana de los Trumps Scores y la mediana de los Trump Margins. Tu código: Ejemplos de análisis con data frames En general, la forma de data frame nos es útil para correr análisis. Aquí un gráfico exploratorio (no miraremos demasiado la sintaxis): ggplot(data = df_trump_scores, mapping = aes(x = trump_margin, trump_score, color = party)) + geom_point() + scale_color_manual(values = c(&quot;blue&quot;, &quot;red&quot;)) Aquí una regresión lineal, que busca estimar el Trump Score de un senador/a de acuerdo a dos predictores: el margen de Trump en su estado y su partido político: mi_modelo &lt;- lm(trump_score ~ trump_margin + party, data = df_trump_scores) summary(mi_modelo) ## ## Call: ## lm(formula = trump_score ~ trump_margin + party, data = df_trump_scores) ## ## Residuals: ## Min 1Q Median 3Q Max ## -40.151 -1.952 1.599 4.487 17.239 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 15.71390 1.40190 11.209 &lt; 2e-16 *** ## trump_margin 0.17650 0.06248 2.825 0.00574 ** ## partyR 66.13619 2.50530 26.399 &lt; 2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 8.623 on 97 degrees of freedom ## Multiple R-squared: 0.9463, Adjusted R-squared: 0.9452 ## F-statistic: 854.5 on 2 and 97 DF, p-value: &lt; 2.2e-16 Listas Las listas son objetos que pueden contener otros objetos, sin importar su tipo! mi_lista &lt;- list(mi_objeto, mi_vector, df_trump_scores, mi_modelo) De la siguiente forma podemos acceder a los elementos de una lista, similar a lo que hicimos antes con vectores: mi_lista[3] ## [[1]] ## # A tibble: 100 x 5 ## last_name state party trump_score trump_margin ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Alexander TN R 80 26.0 ## 2 Blunt MO R 84.8 18.6 ## 3 Brown OH D 14.7 8.13 ## 4 Burr NC R 90.3 3.66 ## 5 Baldwin WI D 14.7 0.764 ## 6 Boozman AR R 88.2 26.9 ## 7 Blackburn TN R 93.9 26.0 ## 8 Barrasso WY R 91.2 46.3 ## 9 Bennet CO D 15.4 -4.91 ## 10 Blumenthal CT D 11.8 -13.6 ## # … with 90 more rows mi_lista[[3]] ## # A tibble: 100 x 5 ## last_name state party trump_score trump_margin ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Alexander TN R 80 26.0 ## 2 Blunt MO R 84.8 18.6 ## 3 Brown OH D 14.7 8.13 ## 4 Burr NC R 90.3 3.66 ## 5 Baldwin WI D 14.7 0.764 ## 6 Boozman AR R 88.2 26.9 ## 7 Blackburn TN R 93.9 26.0 ## 8 Barrasso WY R 91.2 46.3 ## 9 Bennet CO D 15.4 -4.91 ## 10 Blumenthal CT D 11.8 -13.6 ## # … with 90 more rows ¿Cuál es la diferencia entre estos dos últimos comandos? El primero devuelve una nueva lista con solo un elemento, el tercero de la lista original. El segundo, en tanto, devuelve el contenido del tercer elemento de la lista. Sintaxis de R Markdown En el texto de nuestros documentos podemos escribir en *cursiva* o **negrita**. También podemos insertar [links](https://www.google.com/). Usualmente cuando queremos hablar de paquetes o funciones dentro de nuestro texto los escribimos entre tildes invertidos: `tidyverse`, `mean()`. En el texto de nuestros documentos podemos escribir en cursiva o negrita. También podemos insertar links. Usualmente cuando queremos hablar de paquetes o funciones dentro de nuestro texto los escribimos entre tildes invertidos: tidyverse, mean(). Crear tablas también es relativamente simple. Con texto: Nombre | Descripción ------ | ----------- Juan | Un estudiante Marta | Una estudiante Nombre Descripción Juan Un estudiante Marta Una estudiante O a partir de un data frame, con código: ```{r} library(knitr) kable(head(df_trump_scores)) ``` last_name state party trump_score trump_margin Alexander TN R 80.00000 26.0057009 Blunt MO R 84.84848 18.6371170 Brown OH D 14.70588 8.1295744 Burr NC R 90.32258 3.6552285 Baldwin WI D 14.70588 0.7643432 Boozman AR R 88.23529 26.9209780 Importante. Por favor noten que la primera tabla ocupa sintaxis de R Markdown en vez de código de R, por lo que no está dentro de un chunk! También podemos incluir ecuaciones, escritas entre signos de peso con la sintaxis de \\(\\LaTeX\\). Un ejemplo: \\(\\hat{\\beta}=(X&#39;X)^{-1}X&#39;Y\\) ($\\hat{\\beta}=(X'X)^{-1}X'Y$). Título de prueba Subtítulo Se pueden generar el título y subtítulo de arriba con las siguientes líneas: # Título de prueba ## Subtítulo de prueba Una lista * Artículo de lista uno * Artículo de lista dos + Artículo derivado (nota los cuatro espacios antes del símbolo &quot;+&quot;). * Artículo de lista tres Artículo de lista uno Artículo de lista dos Artículo derivado (nota los cuatro espacios antes del símbolo “+”). Artículo de lista tres Otra lista (ahora ordenada) 1. Artículo de lista uno 1. Artículo de lista dos 1. Artículo de lista tres Artículo de lista uno Artículo de lista dos Artículo de lista tres Nota que los números de la lista aparecerán solos en el documento compilado. Una imagen Podemos insertar una imagen, referenciando su ubicación en nuestra carpeta del proyecto: ![](imgs/imagen_ejemplo.png) Compilar nuestro documento Podemos compilar nuestro código a un documento utilizando el botón “Knit” en RStudio, o presionando Ctrl/Cmd + Shift + K. (Ejercicios D y E) Crea un vector numérico, que vaya desde 4 hasta 109. Luego, calcula su media y mediana. Recuerda crear tu(s) chunk(s) con Ctrl/Cmd + Alt + i. Para terminar, inserta la imagen “rstudio.png” de la carpeta “imgs” en este documento, después de un subtítulo “Mi imagen”. Aprovecha de describirla brevemente, haciendo uso de la negrita para destacar palabras. Siguiente script Pasemos brevemente a ver el script 01b. Nota: este es un script .R, cuyo contenido es el siguiente: # Brevemente, este es un script &quot;tradicional&quot; de R, sin R Markdown. # La extensión es .R. # Nota que aquí los comentarios van con # inicial, pues se asume que todo el resto es código. # Podemos hacer exactamente lo mismo que en el formato de R Markdown, con (al menos) ## dos diferencias. Primero, el código se correrá en la consola, no inmediatamente después ## de cada comando. Segundo, no se puede compilar esto a un documento. 3 + 3 library(tidyverse) df_trump_scores &lt;- read_csv(&quot;datos/trump_scores_202003_cong116.csv&quot;) mean(df_trump_scores$trump_score) median(df_trump_scores$trump_score) # De todas formas, los scripts .R son útiles para cosas rápidas y mucha gente los ocupa. # En el curso ocuparemos mayoritariamente scripts .Rmd. "],
["manejo-2a.html", "02A - Manejo de datos Repaso de la clase pasada: R Markdown Manejo de bases de datos La base de datos ideal: tidy Operaciones básicas en bases de datos (Wickham, 2014) Trabajo con R Manejo de datos: operaciones básicas", " 02A - Manejo de datos Si quieres correr este script localmente, acá puedes descargar el proyecto comprimido en .zip. Paquetes que necesitas tener instalados antes de comenzar con el proyecto (2A, 2B, 2C): tidyverse, janitor, writexl. Repaso de la clase pasada: R Markdown R Markdown interpreta texto plano y generara documentos a partir de este. Estos documentos pueden ser reportes, presentaciones, papers, pósters, CVs, etc. [ejs. de plantillas] La interpretación requiere precisión en la sintaxis. Por defecto, R Markdown interpreta todo como texto, a menos que tenga una sintaxis especial. Una forma especial de sintaxis, por ejemplo, es ![](carpeta/imagen.png) Revisemos la sintaxis en el “torpedo” de R Markdown. Manejo de bases de datos Manejo de datos = limpiar y ordenar datos para poder analizarlos. Se suele decir que el 80% del análisis de datos es solo manejo (Wickham, 2014). Fuente: Grolemund &amp; Wickham, 2017 Partes de una base de datos tabular Encabezado (header) Fila (row) Columna (column) Celda (cell) Una pequeña mnemotecnia: La base de datos ideal: tidy En el paradigma “tidy” (Wickham, 2014): Cada variable es una columna Cada observación es una fila Cada valor es una celda Existe una base de datos para cada unidad observacional (Ejercicio A) Por favor revisar este link. Contiene un panel para las emisiones anuales de CO2 de los países americanos (unidad de medida: toneladas per capita). Hay tres bases con la misma información, una por cada hoja. ¿Cuál es la “tidy”? Operaciones básicas en bases de datos (Wickham, 2014) Transformar columnas (añadir o modificar existentes) Puede ser en una sola columna o en múltiples columnas En el tidyverse, mutate() Seleccionar columnas (y excluir otras) En el tidyverse, select() Filtrar observaciones en base a una condición En el tidyverse, filter() Ordenar la base de datos, en base a una(s) variable(s) En el tidyverse, arrange() Agregar/colapsar la base de datos Colapsar múltiples valores en algún resumen (por ejemplo, media o suma) Puede ser para toda la base o por subgrupos En el tidyverse, summarize() (Ejercicio B) Favor ir a este link ¿Qué operaciones básicas pueden ser interesantes para comenzar a analizar estos datos? Contesta con dos ejemplos: Trabajo con R Comenzaremos cargando el tidyverse: library(tidyverse) Base de datos: aprobación de presidentes/as en Latinoamérica Tenemos una base de datos ligeramente editada a partir de Reyes-Housholder (2019). Incluye también un par de variables de los World Development Indicators, recopiladas por Quality of Government. La base de datos se encuentra en datos/base_aprob_reyes-housholder.csv. Contiene información de la aprobación de presidentes/as en 17 países de América Latina por trimestre (2000-2014), además de variables de control. ¿Cuál es la unidad de análisis de la base? ¿Cuántas observaciones tendrá, asumiendo un panel balanceado? Carga de base en formato csv df_aprob &lt;- read_csv(&quot;datos/base_aprob_reyes-housholder.csv&quot;) ## Parsed with column specification: ## cols( ## country = col_character(), ## year = col_double(), ## quarter = col_double(), ## president = col_character(), ## net_approval = col_double(), ## pres_sex = col_character(), ## pres_sex_d = col_double(), ## exec_corr = col_double(), ## gdp_growth = col_double(), ## unemp = col_double(), ## wdi_gdp = col_double(), ## wdi_pop = col_double() ## ) Resúmenes simples para data frames El resumen más simple de un objeto en R suele poder obtenerse con su nombre comando. Nota cómo debajo de cada nombre, algunas variables tienen &lt;dbl&gt; y otras &lt;chr&gt;. ¿Qué significa esto? df_aprob ## # A tibble: 1,020 x 12 ## country year quarter president net_approval pres_sex pres_sex_d exec_corr gdp_growth unemp wdi_gdp wdi_pop ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Argentina 2000 1 Fernando de la Rúa 40.1 male 0 14.0 -0.8 15 552151219031. 37057452 ## 2 Argentina 2000 2 Fernando de la Rúa 16.4 male 0 14.0 -0.8 15 552151219031. 37057452 ## 3 Argentina 2000 3 Fernando de la Rúa 24.0 male 0 14.0 -0.8 15 552151219031. 37057452 ## 4 Argentina 2000 4 Fernando de la Rúa -18.3 male 0 14.0 -0.8 15 552151219031. 37057452 ## 5 Argentina 2001 1 Fernando de la Rúa -6.97 male 0 14.0 -4.4 18.3 527807756979. 37471509 ## 6 Argentina 2001 2 Fernando de la Rúa -20.1 male 0 14.0 -4.4 18.3 527807756979. 37471509 ## 7 Argentina 2001 3 Fernando de la Rúa -19.4 male 0 14.0 -4.4 18.3 527807756979. 37471509 ## 8 Argentina 2001 4 Fernando de la Rúa -23.2 male 0 14.0 -4.4 18.3 527807756979. 37471509 ## 9 Argentina 2002 1 Eduardo Alberto Duhalde -2.01 male 0 25.0 -10.9 17.9 470305820970. 37889370 ## 10 Argentina 2002 2 Eduardo Alberto Duhalde -20.1 male 0 25.0 -10.9 17.9 470305820970. 37889370 ## # … with 1,010 more rows Por cierto, podemos obtener un resumen similar clickeando nuestro objeto en el panel “Environment” (superior derecho) de RStudio. Esto es lo mismo que ocupar el comando View(): View(df_aprob) Otro resumen útil es la función glimpse() del tidyverse, que nos da otra perspectiva: glimpse(df_aprob) ## Rows: 1,020 ## Columns: 12 ## $ country &lt;chr&gt; &quot;Argentina&quot;, &quot;Argentina&quot;, &quot;Argentina&quot;, &quot;Argentina&quot;, &quot;Argentina&quot;, &quot;Argentina&quot;, &quot;Argentina&quot;, &quot;Argentina&quot;, &quot;Argentina&quot;, &quot;Argentina&quot;, &quot;Argentina&quot;, &quot;Argentina&quot;, &quot;Argentina&quot;, &quot;Argentina&quot;, &quot;Argentina&quot;, &quot;Argentina&quot;, &quot;Argentina&quot;, &quot;Arge… ## $ year &lt;dbl&gt; 2000, 2000, 2000, 2000, 2001, 2001, 2001, 2001, 2002, 2002, 2002, 2002, 2003, 2003, 2003, 2003, 2004, 2004, 2004, 2004, 2005, 2005, 2005, 2005, 2006, 2006, 2006, 2006, 2007, 2007, 2007, 2007, 2008, 2008, 2008, 2008, 2009, 2009… ## $ quarter &lt;dbl&gt; 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4… ## $ president &lt;chr&gt; &quot;Fernando de la Rúa&quot;, &quot;Fernando de la Rúa&quot;, &quot;Fernando de la Rúa&quot;, &quot;Fernando de la Rúa&quot;, &quot;Fernando de la Rúa&quot;, &quot;Fernando de la Rúa&quot;, &quot;Fernando de la Rúa&quot;, &quot;Fernando de la Rúa&quot;, &quot;Eduardo Alberto Duhalde&quot;, &quot;Eduardo Alberto Duhald… ## $ net_approval &lt;dbl&gt; 40.126, 16.390, 23.968, -18.254, -6.973, -20.082, -19.384, -23.182, -2.006, -20.075, -24.965, -16.831, -2.775, 26.511, 53.679, 52.975, 57.142, 52.756, 39.078, 44.899, 45.691, 45.429, 40.584, 43.390, 48.887, 46.757, 44.563, 43.… ## $ pres_sex &lt;chr&gt; &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;m… ## $ pres_sex_d &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0… ## $ exec_corr &lt;dbl&gt; 14.01525, 14.01525, 14.01525, 14.01525, 14.01525, 14.01525, 14.01525, 14.01525, 25.00388, 25.00388, 25.00388, 25.00388, 50.14544, 50.14544, 50.14544, 50.14544, 50.14544, 50.14544, 50.14544, 50.14544, 50.14544, 50.14544, 50.145… ## $ gdp_growth &lt;dbl&gt; -0.800000, -0.800000, -0.800000, -0.800000, -4.400000, -4.400000, -4.400000, -4.400000, -10.900000, -10.900000, -10.900000, -10.900000, 8.800000, 8.800000, 8.800000, 8.800000, 9.000000, 9.000000, 9.000000, 9.000000, 8.900000, … ## $ unemp &lt;dbl&gt; 15.0000, 15.0000, 15.0000, 15.0000, 18.3000, 18.3000, 18.3000, 18.3000, 17.9000, 17.9000, 17.9000, 17.9000, 19.9500, 17.4400, 16.1318, 14.4528, 14.2935, 14.6621, 13.1475, 11.9976, 12.9295, 11.9526, 11.1434, 10.0284, 11.3064, 1… ## $ wdi_gdp &lt;dbl&gt; 552151219031, 552151219031, 552151219031, 552151219031, 527807756979, 527807756979, 527807756979, 527807756979, 470305820970, 470305820970, 470305820970, 470305820970, 511866938234, 511866938234, 511866938234, 511866938234, 55… ## $ wdi_pop &lt;dbl&gt; 37057452, 37057452, 37057452, 37057452, 37471509, 37471509, 37471509, 37471509, 37889370, 37889370, 37889370, 37889370, 38309379, 38309379, 38309379, 38309379, 38728696, 38728696, 38728696, 38728696, 39145488, 39145488, 391454… ¿Qué significan las variables de esta base de datos? Completa la siguiente tabla: Variable Descripción country País. year Año. quarter Trimestre. president Presidente/a. net_approval Aprobación neta del presidente/a (% aprobación - % rechazo). pres_sex pres_sex_d exec_corr Corrupción en el Ejecutivo, según V-Dem. De 0 a 100 (mayor es más corrupción). gdp_growth unemp wdi_gdp Producto interno bruto del país, ajustado por paridad de cambio (PPP) y constante en dólares del 2011. wdi_pop Manejo de datos: operaciones básicas En todas las operaciones básicas que veremos hoy el primer argumento en la función será el data frame a editar. Seleccionar columnas con select() Seleccionemos solo la columna de países: select(df_aprob, country) ## # A tibble: 1,020 x 1 ## country ## &lt;chr&gt; ## 1 Argentina ## 2 Argentina ## 3 Argentina ## 4 Argentina ## 5 Argentina ## 6 Argentina ## 7 Argentina ## 8 Argentina ## 9 Argentina ## 10 Argentina ## # … with 1,010 more rows Recuerda que esto no creó ningún objeto nuevo, es solo un comando que estamos ejecutando en la consola. Si quisiéramos crear un objeto nuevo, tendríamos que asignarlo: df_aprob_reducida &lt;- select(df_aprob, country) df_aprob_reducida ## # A tibble: 1,020 x 1 ## country ## &lt;chr&gt; ## 1 Argentina ## 2 Argentina ## 3 Argentina ## 4 Argentina ## 5 Argentina ## 6 Argentina ## 7 Argentina ## 8 Argentina ## 9 Argentina ## 10 Argentina ## # … with 1,010 more rows Podemos seleccionar múltiples columnas a la vez, separadas por comas: select(df_aprob, country, year, unemp) ## # A tibble: 1,020 x 3 ## country year unemp ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Argentina 2000 15 ## 2 Argentina 2000 15 ## 3 Argentina 2000 15 ## 4 Argentina 2000 15 ## 5 Argentina 2001 18.3 ## 6 Argentina 2001 18.3 ## 7 Argentina 2001 18.3 ## 8 Argentina 2001 18.3 ## 9 Argentina 2002 17.9 ## 10 Argentina 2002 17.9 ## # … with 1,010 more rows Supongamos que queremos las primeras cinco variables de la base de datos. Las siguientes tres formas nos permitirán obtenerlas: select(df_aprob, country, year, quarter, president, net_approval) ## # A tibble: 1,020 x 5 ## country year quarter president net_approval ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Argentina 2000 1 Fernando de la Rúa 40.1 ## 2 Argentina 2000 2 Fernando de la Rúa 16.4 ## 3 Argentina 2000 3 Fernando de la Rúa 24.0 ## 4 Argentina 2000 4 Fernando de la Rúa -18.3 ## 5 Argentina 2001 1 Fernando de la Rúa -6.97 ## 6 Argentina 2001 2 Fernando de la Rúa -20.1 ## 7 Argentina 2001 3 Fernando de la Rúa -19.4 ## 8 Argentina 2001 4 Fernando de la Rúa -23.2 ## 9 Argentina 2002 1 Eduardo Alberto Duhalde -2.01 ## 10 Argentina 2002 2 Eduardo Alberto Duhalde -20.1 ## # … with 1,010 more rows select(df_aprob, country:net_approval) # esta es la forma recomendada para la mayoría de los casos ## # A tibble: 1,020 x 5 ## country year quarter president net_approval ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Argentina 2000 1 Fernando de la Rúa 40.1 ## 2 Argentina 2000 2 Fernando de la Rúa 16.4 ## 3 Argentina 2000 3 Fernando de la Rúa 24.0 ## 4 Argentina 2000 4 Fernando de la Rúa -18.3 ## 5 Argentina 2001 1 Fernando de la Rúa -6.97 ## 6 Argentina 2001 2 Fernando de la Rúa -20.1 ## 7 Argentina 2001 3 Fernando de la Rúa -19.4 ## 8 Argentina 2001 4 Fernando de la Rúa -23.2 ## 9 Argentina 2002 1 Eduardo Alberto Duhalde -2.01 ## 10 Argentina 2002 2 Eduardo Alberto Duhalde -20.1 ## # … with 1,010 more rows select(df_aprob, 1:5) ## # A tibble: 1,020 x 5 ## country year quarter president net_approval ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Argentina 2000 1 Fernando de la Rúa 40.1 ## 2 Argentina 2000 2 Fernando de la Rúa 16.4 ## 3 Argentina 2000 3 Fernando de la Rúa 24.0 ## 4 Argentina 2000 4 Fernando de la Rúa -18.3 ## 5 Argentina 2001 1 Fernando de la Rúa -6.97 ## 6 Argentina 2001 2 Fernando de la Rúa -20.1 ## 7 Argentina 2001 3 Fernando de la Rúa -19.4 ## 8 Argentina 2001 4 Fernando de la Rúa -23.2 ## 9 Argentina 2002 1 Eduardo Alberto Duhalde -2.01 ## 10 Argentina 2002 2 Eduardo Alberto Duhalde -20.1 ## # … with 1,010 more rows El comando select() también nos sirve para reordenar las columnas. Supongamos que queremos que la variable president sea la primera. Podemos hacer algo como esto: select(df_aprob, president, country:year, net_approval:unemp) ## # A tibble: 1,020 x 9 ## president country year net_approval pres_sex pres_sex_d exec_corr gdp_growth unemp ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Fernando de la Rúa Argentina 2000 40.1 male 0 14.0 -0.8 15 ## 2 Fernando de la Rúa Argentina 2000 16.4 male 0 14.0 -0.8 15 ## 3 Fernando de la Rúa Argentina 2000 24.0 male 0 14.0 -0.8 15 ## 4 Fernando de la Rúa Argentina 2000 -18.3 male 0 14.0 -0.8 15 ## 5 Fernando de la Rúa Argentina 2001 -6.97 male 0 14.0 -4.4 18.3 ## 6 Fernando de la Rúa Argentina 2001 -20.1 male 0 14.0 -4.4 18.3 ## 7 Fernando de la Rúa Argentina 2001 -19.4 male 0 14.0 -4.4 18.3 ## 8 Fernando de la Rúa Argentina 2001 -23.2 male 0 14.0 -4.4 18.3 ## 9 Eduardo Alberto Duhalde Argentina 2002 -2.01 male 0 25.0 -10.9 17.9 ## 10 Eduardo Alberto Duhalde Argentina 2002 -20.1 male 0 25.0 -10.9 17.9 ## # … with 1,010 more rows Esta forma es un poco tediosa. Hay una función de ayuda que nos será útil en este caso, se llama everything() select(df_aprob, president, everything()) # selecciona &quot;president&quot; y todo lo demás ## # A tibble: 1,020 x 12 ## president country year quarter net_approval pres_sex pres_sex_d exec_corr gdp_growth unemp wdi_gdp wdi_pop ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Fernando de la Rúa Argentina 2000 1 40.1 male 0 14.0 -0.8 15 552151219031. 37057452 ## 2 Fernando de la Rúa Argentina 2000 2 16.4 male 0 14.0 -0.8 15 552151219031. 37057452 ## 3 Fernando de la Rúa Argentina 2000 3 24.0 male 0 14.0 -0.8 15 552151219031. 37057452 ## 4 Fernando de la Rúa Argentina 2000 4 -18.3 male 0 14.0 -0.8 15 552151219031. 37057452 ## 5 Fernando de la Rúa Argentina 2001 1 -6.97 male 0 14.0 -4.4 18.3 527807756979. 37471509 ## 6 Fernando de la Rúa Argentina 2001 2 -20.1 male 0 14.0 -4.4 18.3 527807756979. 37471509 ## 7 Fernando de la Rúa Argentina 2001 3 -19.4 male 0 14.0 -4.4 18.3 527807756979. 37471509 ## 8 Fernando de la Rúa Argentina 2001 4 -23.2 male 0 14.0 -4.4 18.3 527807756979. 37471509 ## 9 Eduardo Alberto Duhalde Argentina 2002 1 -2.01 male 0 25.0 -10.9 17.9 470305820970. 37889370 ## 10 Eduardo Alberto Duhalde Argentina 2002 2 -20.1 male 0 25.0 -10.9 17.9 470305820970. 37889370 ## # … with 1,010 more rows Renombrar columnas con rename() Podemos cambiar el nombre de una columna con el comando rename(). Por ejemplo: rename(df_aprob, trimeste = quarter) # noten que no estoy modificando la base, solo imprimiéndola! ## # A tibble: 1,020 x 12 ## country year trimeste president net_approval pres_sex pres_sex_d exec_corr gdp_growth unemp wdi_gdp wdi_pop ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Argentina 2000 1 Fernando de la Rúa 40.1 male 0 14.0 -0.8 15 552151219031. 37057452 ## 2 Argentina 2000 2 Fernando de la Rúa 16.4 male 0 14.0 -0.8 15 552151219031. 37057452 ## 3 Argentina 2000 3 Fernando de la Rúa 24.0 male 0 14.0 -0.8 15 552151219031. 37057452 ## 4 Argentina 2000 4 Fernando de la Rúa -18.3 male 0 14.0 -0.8 15 552151219031. 37057452 ## 5 Argentina 2001 1 Fernando de la Rúa -6.97 male 0 14.0 -4.4 18.3 527807756979. 37471509 ## 6 Argentina 2001 2 Fernando de la Rúa -20.1 male 0 14.0 -4.4 18.3 527807756979. 37471509 ## 7 Argentina 2001 3 Fernando de la Rúa -19.4 male 0 14.0 -4.4 18.3 527807756979. 37471509 ## 8 Argentina 2001 4 Fernando de la Rúa -23.2 male 0 14.0 -4.4 18.3 527807756979. 37471509 ## 9 Argentina 2002 1 Eduardo Alberto Duhalde -2.01 male 0 25.0 -10.9 17.9 470305820970. 37889370 ## 10 Argentina 2002 2 Eduardo Alberto Duhalde -20.1 male 0 25.0 -10.9 17.9 470305820970. 37889370 ## # … with 1,010 more rows Filtrar observaciones con filter() A menudo queremos quedarnos solo con algunas observaciones de nuestra base de datos, filtrando de acuerdo a características específicas. Podemos hacer esto gracias a la función filter() y algo llamado “operadores lógicos”. Para comenzar, quedémonos solo con las observaciones de Chile: filter(df_aprob, country == &quot;Chile&quot;) ## # A tibble: 60 x 12 ## country year quarter president net_approval pres_sex pres_sex_d exec_corr gdp_growth unemp wdi_gdp wdi_pop ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Chile 2000 1 Eduardo Frei Ruiz-Tagle            6.22 male 0 3.63 5.3 9.2 218492826314. 15262754 ## 2 Chile 2000 2 Ricardo Lagos Escobar      19.8 male 0 3.63 5.3 9.2 218492826314. 15262754 ## 3 Chile 2000 3 Ricardo Lagos Escobar      19.5 male 0 3.63 5.3 9.2 218492826314. 15262754 ## 4 Chile 2000 4 Ricardo Lagos Escobar      14.8 male 0 3.63 5.3 9.2 218492826314. 15262754 ## 5 Chile 2001 1 Ricardo Lagos Escobar      7.99 male 0 3.63 3.3 9.1 225709747742. 15444969 ## 6 Chile 2001 2 Ricardo Lagos Escobar      1.81 male 0 3.63 3.3 9.1 225709747742. 15444969 ## 7 Chile 2001 3 Ricardo Lagos Escobar      -1.40 male 0 3.63 3.3 9.1 225709747742. 15444969 ## 8 Chile 2001 4 Ricardo Lagos Escobar      6.90 male 0 3.63 3.3 9.1 225709747742. 15444969 ## 9 Chile 2002 1 Ricardo Lagos Escobar      6.60 male 0 3.63 3.1 8.9 232722483093. 15623635 ## 10 Chile 2002 2 Ricardo Lagos Escobar      3.65 male 0 3.63 3.1 8.9 232722483093. 15623635 ## # … with 50 more rows Le estamos diciendo a filter(), por medio del segundo argumento, que solo se quede con observaciones en las que la variable country es igual a Chile. Este “es igual a” es un operador lógico, que se escribe como “==” en R. Aquí hay una lista de operadores lógicos comunes: operador descripción == es igual a != es distinto a &gt; es mayor a &lt; es menor a &gt;= es mayor o igual a &lt;= es menor o igual a &amp; intersección | unión %in% está contenido en Por ejemplo, podemos obtener todas las observaciones (país-año-trimestre) en las que la aprobación presidencial neta es positiva: filter(df_aprob, net_approval &gt; 0) ## # A tibble: 709 x 12 ## country year quarter president net_approval pres_sex pres_sex_d exec_corr gdp_growth unemp wdi_gdp wdi_pop ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Argentina 2000 1 Fernando de la Rúa 40.1 male 0 14.0 -0.8 15 552151219031. 37057452 ## 2 Argentina 2000 2 Fernando de la Rúa 16.4 male 0 14.0 -0.8 15 552151219031. 37057452 ## 3 Argentina 2000 3 Fernando de la Rúa 24.0 male 0 14.0 -0.8 15 552151219031. 37057452 ## 4 Argentina 2003 2 Eduardo Alberto Duhalde 26.5 male 0 50.1 8.8 17.4 511866938234. 38309379 ## 5 Argentina 2003 3 Néstor Carlos Kirchner 53.7 male 0 50.1 8.8 16.1 511866938234. 38309379 ## 6 Argentina 2003 4 Néstor Carlos Kirchner 53.0 male 0 50.1 8.8 14.5 511866938234. 38309379 ## 7 Argentina 2004 1 Néstor Carlos Kirchner 57.1 male 0 50.1 9 14.3 558086338624. 38728696 ## 8 Argentina 2004 2 Néstor Carlos Kirchner 52.8 male 0 50.1 9 14.7 558086338624. 38728696 ## 9 Argentina 2004 3 Néstor Carlos Kirchner 39.1 male 0 50.1 9 13.1 558086338624. 38728696 ## 10 Argentina 2004 4 Néstor Carlos Kirchner 44.9 male 0 50.1 9 12.0 558086338624. 38728696 ## # … with 699 more rows Podemos también realizar filtros más complejos. Obtengamos solo las observaciones del Cono Sur: filter(df_aprob, country == &quot;Argentina&quot; | country == &quot;Chile&quot; | country == &quot;Uruguay&quot;) ## # A tibble: 180 x 12 ## country year quarter president net_approval pres_sex pres_sex_d exec_corr gdp_growth unemp wdi_gdp wdi_pop ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Argentina 2000 1 Fernando de la Rúa 40.1 male 0 14.0 -0.8 15 552151219031. 37057452 ## 2 Argentina 2000 2 Fernando de la Rúa 16.4 male 0 14.0 -0.8 15 552151219031. 37057452 ## 3 Argentina 2000 3 Fernando de la Rúa 24.0 male 0 14.0 -0.8 15 552151219031. 37057452 ## 4 Argentina 2000 4 Fernando de la Rúa -18.3 male 0 14.0 -0.8 15 552151219031. 37057452 ## 5 Argentina 2001 1 Fernando de la Rúa -6.97 male 0 14.0 -4.4 18.3 527807756979. 37471509 ## 6 Argentina 2001 2 Fernando de la Rúa -20.1 male 0 14.0 -4.4 18.3 527807756979. 37471509 ## 7 Argentina 2001 3 Fernando de la Rúa -19.4 male 0 14.0 -4.4 18.3 527807756979. 37471509 ## 8 Argentina 2001 4 Fernando de la Rúa -23.2 male 0 14.0 -4.4 18.3 527807756979. 37471509 ## 9 Argentina 2002 1 Eduardo Alberto Duhalde -2.01 male 0 25.0 -10.9 17.9 470305820970. 37889370 ## 10 Argentina 2002 2 Eduardo Alberto Duhalde -20.1 male 0 25.0 -10.9 17.9 470305820970. 37889370 ## # … with 170 more rows filter(df_aprob, country %in% c(&quot;Argentina&quot;, &quot;Chile&quot;, &quot;Uruguay&quot;)) # lo mismo, con otro op. lógico ## # A tibble: 180 x 12 ## country year quarter president net_approval pres_sex pres_sex_d exec_corr gdp_growth unemp wdi_gdp wdi_pop ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Argentina 2000 1 Fernando de la Rúa 40.1 male 0 14.0 -0.8 15 552151219031. 37057452 ## 2 Argentina 2000 2 Fernando de la Rúa 16.4 male 0 14.0 -0.8 15 552151219031. 37057452 ## 3 Argentina 2000 3 Fernando de la Rúa 24.0 male 0 14.0 -0.8 15 552151219031. 37057452 ## 4 Argentina 2000 4 Fernando de la Rúa -18.3 male 0 14.0 -0.8 15 552151219031. 37057452 ## 5 Argentina 2001 1 Fernando de la Rúa -6.97 male 0 14.0 -4.4 18.3 527807756979. 37471509 ## 6 Argentina 2001 2 Fernando de la Rúa -20.1 male 0 14.0 -4.4 18.3 527807756979. 37471509 ## 7 Argentina 2001 3 Fernando de la Rúa -19.4 male 0 14.0 -4.4 18.3 527807756979. 37471509 ## 8 Argentina 2001 4 Fernando de la Rúa -23.2 male 0 14.0 -4.4 18.3 527807756979. 37471509 ## 9 Argentina 2002 1 Eduardo Alberto Duhalde -2.01 male 0 25.0 -10.9 17.9 470305820970. 37889370 ## 10 Argentina 2002 2 Eduardo Alberto Duhalde -20.1 male 0 25.0 -10.9 17.9 470305820970. 37889370 ## # … with 170 more rows Podemos también incluir pequeñas operaciones en nuestros filtros. Obtengamos todas las observaciones en las que la corrupción ejecutiva es mayor a la del promedio de toda la base: filter(df_aprob, exec_corr &gt; mean(exec_corr)) ## # A tibble: 456 x 12 ## country year quarter president net_approval pres_sex pres_sex_d exec_corr gdp_growth unemp wdi_gdp wdi_pop ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Argentina 2003 1 Eduardo Alberto Duhalde -2.78 male 0 50.1 8.8 20.0 511866938234. 38309379 ## 2 Argentina 2003 2 Eduardo Alberto Duhalde 26.5 male 0 50.1 8.8 17.4 511866938234. 38309379 ## 3 Argentina 2003 3 Néstor Carlos Kirchner 53.7 male 0 50.1 8.8 16.1 511866938234. 38309379 ## 4 Argentina 2003 4 Néstor Carlos Kirchner 53.0 male 0 50.1 8.8 14.5 511866938234. 38309379 ## 5 Argentina 2004 1 Néstor Carlos Kirchner 57.1 male 0 50.1 9 14.3 558086338624. 38728696 ## 6 Argentina 2004 2 Néstor Carlos Kirchner 52.8 male 0 50.1 9 14.7 558086338624. 38728696 ## 7 Argentina 2004 3 Néstor Carlos Kirchner 39.1 male 0 50.1 9 13.1 558086338624. 38728696 ## 8 Argentina 2004 4 Néstor Carlos Kirchner 44.9 male 0 50.1 9 12.0 558086338624. 38728696 ## 9 Argentina 2005 1 Néstor Carlos Kirchner 45.7 male 0 50.1 8.9 12.9 607486243380. 39145488 ## 10 Argentina 2005 2 Néstor Carlos Kirchner 45.4 male 0 50.1 8.9 12.0 607486243380. 39145488 ## # … with 446 more rows (Ejercicio C) Selecciona solo las dos columnas que registran el sexo del presidente/a en la base de datos. Recuerda que los chunks se insertan con Ctrl/Cmd + Alt + i. Tu código: Filtra la base de datos para que solo tenga las observaciones del año 2000. Tu código: Filtra la base de datos para que solo incluya observaciones de crisis económica: cuando el crecimiento del PIB sea negativo y/o el desempleo sea mayor al 20%. Tu código: Ordenar el data frame con arrange() Podemos cambiar el orden de las observaciones con el comando arrange(). Por ejemplo, ordenémoslas desde el país-año-trimestre menos corrupto al más corrupto: arrange(df_aprob, exec_corr) ## # A tibble: 1,020 x 12 ## country year quarter president net_approval pres_sex pres_sex_d exec_corr gdp_growth unemp wdi_gdp wdi_pop ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Uruguay 2000 1 Julio Sanguietti 41.2 male 0 2.13 -1.93 13.3 42760248091. 3321245 ## 2 Uruguay 2000 2 Jorge Battle 45.4 male 0 2.13 -1.93 13.3 42760248091. 3321245 ## 3 Uruguay 2000 3 Jorge Battle 31.4 male 0 2.13 -1.93 13.3 42760248091. 3321245 ## 4 Uruguay 2000 4 Jorge Battle 18.1 male 0 2.13 -1.93 13.3 42760248091. 3321245 ## 5 Uruguay 2001 1 Jorge Battle 18.5 male 0 2.13 -3.84 14.9 41116488580. 3327103 ## 6 Uruguay 2001 2 Jorge Battle 17.8 male 0 2.13 -3.84 14.9 41116488580. 3327103 ## 7 Uruguay 2001 3 Jorge Battle 15.9 male 0 2.13 -3.84 14.9 41116488580. 3327103 ## 8 Uruguay 2001 4 Jorge Battle 14.5 male 0 2.13 -3.84 14.9 41116488580. 3327103 ## 9 Uruguay 2002 1 Jorge Battle 6.36 male 0 2.13 -7.73 16.9 37937358718. 3327773 ## 10 Uruguay 2002 2 Jorge Battle -6.37 male 0 2.13 -7.73 16.9 37937358718. 3327773 ## # … with 1,010 more rows Si quisiéramos ordenarlo inversamente, tendríamos que añadir un - (signo menos) antes de la variable: arrange(df_aprob, -exec_corr) ## # A tibble: 1,020 x 12 ## country year quarter president net_approval pres_sex pres_sex_d exec_corr gdp_growth unemp wdi_gdp wdi_pop ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Venezuela 2013 1 Hugo Chávez -12.6 male 0 94.4 1.34 7.54 535572061141. 30317848 ## 2 Venezuela 2013 2 Nicolás Maduro -13.7 male 0 94.4 1.34 7.54 535572061141. 30317848 ## 3 Venezuela 2013 3 Nicolás Maduro -16.8 male 0 94.4 1.34 7.54 535572061141. 30317848 ## 4 Venezuela 2013 4 Nicolás Maduro -16.6 male 0 94.4 1.34 7.54 535572061141. 30317848 ## 5 Venezuela 2014 1 Nicolás Maduro -18.1 male 0 94.4 -3.89 6.95 514714815230. 30738378 ## 6 Venezuela 2014 2 Nicolás Maduro -19.4 male 0 94.4 -3.89 6.95 514714815230. 30738378 ## 7 Venezuela 2014 3 Nicolás Maduro -22.1 male 0 94.4 -3.89 6.95 514714815230. 30738378 ## 8 Venezuela 2014 4 Nicolás Maduro -24.9 male 0 94.4 -3.89 6.95 514714815230. 30738378 ## 9 Venezuela 2007 1 Hugo Chávez -10.2 male 0 93.5 8.75 7.47 478405261854. 27691965 ## 10 Venezuela 2007 2 Hugo Chávez -11.0 male 0 93.5 8.75 7.47 478405261854. 27691965 ## # … with 1,010 more rows Podemos ordenar por más de una variable. Esto es, ordenar a partir de una primera variable y luego ordenar los empates a partir de otra segunda variable. Veamos el siguiente ejemplo: arrange(df_aprob, pres_sex, -net_approval) ## # A tibble: 1,020 x 12 ## country year quarter president net_approval pres_sex pres_sex_d exec_corr gdp_growth unemp wdi_gdp wdi_pop ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Brazil 2013 1 Dilma Vana Rousseff 62.5 female 1 27.3 3 5.55 3.12e12 202408632 ## 2 Brazil 2012 4 Dilma Vana Rousseff 60.9 female 1 33.4 1.9 4.93 3.03e12 200560983 ## 3 Brazil 2012 2 Dilma Vana Rousseff 60.5 female 1 33.4 1.9 5.9 3.03e12 200560983 ## 4 Brazil 2012 3 Dilma Vana Rousseff 58.7 female 1 33.4 1.9 5.37 3.03e12 200560983 ## 5 Brazil 2012 1 Dilma Vana Rousseff 57.2 female 1 33.4 1.9 5.8 3.03e12 200560983 ## 6 Brazil 2011 4 Dilma Vana Rousseff 54.3 female 1 33.4 4 5.23 2.97e12 198686688 ## 7 Brazil 2011 1 Dilma Vana Rousseff 47.7 female 1 33.4 4 6.33 2.97e12 198686688 ## 8 Brazil 2011 3 Dilma Vana Rousseff 45.6 female 1 33.4 4 6 2.97e12 198686688 ## 9 Brazil 2013 2 Dilma Vana Rousseff 44.4 female 1 27.3 3 5.86 3.12e12 202408632 ## 10 Argentina 2011 4 Cristina Fernández de Kirchner 44.3 female 1 52.4 6 6.75 8.18e11 41656879 ## # … with 1,010 more rows Transformar variables con mutate() Transformaciones con una variable Supongamos que queremos crear una variable con el PIB en versión logarítmica: mutate(df_aprob, wdi_gdp_log = log(wdi_gdp)) ## # A tibble: 1,020 x 13 ## country year quarter president net_approval pres_sex pres_sex_d exec_corr gdp_growth unemp wdi_gdp wdi_pop wdi_gdp_log ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Argentina 2000 1 Fernando de la Rúa 40.1 male 0 14.0 -0.8 15 552151219031. 37057452 27.0 ## 2 Argentina 2000 2 Fernando de la Rúa 16.4 male 0 14.0 -0.8 15 552151219031. 37057452 27.0 ## 3 Argentina 2000 3 Fernando de la Rúa 24.0 male 0 14.0 -0.8 15 552151219031. 37057452 27.0 ## 4 Argentina 2000 4 Fernando de la Rúa -18.3 male 0 14.0 -0.8 15 552151219031. 37057452 27.0 ## 5 Argentina 2001 1 Fernando de la Rúa -6.97 male 0 14.0 -4.4 18.3 527807756979. 37471509 27.0 ## 6 Argentina 2001 2 Fernando de la Rúa -20.1 male 0 14.0 -4.4 18.3 527807756979. 37471509 27.0 ## 7 Argentina 2001 3 Fernando de la Rúa -19.4 male 0 14.0 -4.4 18.3 527807756979. 37471509 27.0 ## 8 Argentina 2001 4 Fernando de la Rúa -23.2 male 0 14.0 -4.4 18.3 527807756979. 37471509 27.0 ## 9 Argentina 2002 1 Eduardo Alberto Duhalde -2.01 male 0 25.0 -10.9 17.9 470305820970. 37889370 26.9 ## 10 Argentina 2002 2 Eduardo Alberto Duhalde -20.1 male 0 25.0 -10.9 17.9 470305820970. 37889370 26.9 ## # … with 1,010 more rows Podemos realizar cualquier tipo de operación en las variables. Por ejemplo, transformemos la escala de wdi_pop a millones: mutate(df_aprob, wdi_pop_mill = wdi_pop / 1000000) ## # A tibble: 1,020 x 13 ## country year quarter president net_approval pres_sex pres_sex_d exec_corr gdp_growth unemp wdi_gdp wdi_pop wdi_pop_mill ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Argentina 2000 1 Fernando de la Rúa 40.1 male 0 14.0 -0.8 15 552151219031. 37057452 37.1 ## 2 Argentina 2000 2 Fernando de la Rúa 16.4 male 0 14.0 -0.8 15 552151219031. 37057452 37.1 ## 3 Argentina 2000 3 Fernando de la Rúa 24.0 male 0 14.0 -0.8 15 552151219031. 37057452 37.1 ## 4 Argentina 2000 4 Fernando de la Rúa -18.3 male 0 14.0 -0.8 15 552151219031. 37057452 37.1 ## 5 Argentina 2001 1 Fernando de la Rúa -6.97 male 0 14.0 -4.4 18.3 527807756979. 37471509 37.5 ## 6 Argentina 2001 2 Fernando de la Rúa -20.1 male 0 14.0 -4.4 18.3 527807756979. 37471509 37.5 ## 7 Argentina 2001 3 Fernando de la Rúa -19.4 male 0 14.0 -4.4 18.3 527807756979. 37471509 37.5 ## 8 Argentina 2001 4 Fernando de la Rúa -23.2 male 0 14.0 -4.4 18.3 527807756979. 37471509 37.5 ## 9 Argentina 2002 1 Eduardo Alberto Duhalde -2.01 male 0 25.0 -10.9 17.9 470305820970. 37889370 37.9 ## 10 Argentina 2002 2 Eduardo Alberto Duhalde -20.1 male 0 25.0 -10.9 17.9 470305820970. 37889370 37.9 ## # … with 1,010 more rows Transformaciones con múltiples variables Crucialmente, podemos generar operaciones entre las variables. Por ejemplo, calculemos el GDP per capita: mutate(df_aprob, wdi_gdp_pc = wdi_gdp / wdi_pop) ## # A tibble: 1,020 x 13 ## country year quarter president net_approval pres_sex pres_sex_d exec_corr gdp_growth unemp wdi_gdp wdi_pop wdi_gdp_pc ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Argentina 2000 1 Fernando de la Rúa 40.1 male 0 14.0 -0.8 15 552151219031. 37057452 14900. ## 2 Argentina 2000 2 Fernando de la Rúa 16.4 male 0 14.0 -0.8 15 552151219031. 37057452 14900. ## 3 Argentina 2000 3 Fernando de la Rúa 24.0 male 0 14.0 -0.8 15 552151219031. 37057452 14900. ## 4 Argentina 2000 4 Fernando de la Rúa -18.3 male 0 14.0 -0.8 15 552151219031. 37057452 14900. ## 5 Argentina 2001 1 Fernando de la Rúa -6.97 male 0 14.0 -4.4 18.3 527807756979. 37471509 14086. ## 6 Argentina 2001 2 Fernando de la Rúa -20.1 male 0 14.0 -4.4 18.3 527807756979. 37471509 14086. ## 7 Argentina 2001 3 Fernando de la Rúa -19.4 male 0 14.0 -4.4 18.3 527807756979. 37471509 14086. ## 8 Argentina 2001 4 Fernando de la Rúa -23.2 male 0 14.0 -4.4 18.3 527807756979. 37471509 14086. ## 9 Argentina 2002 1 Eduardo Alberto Duhalde -2.01 male 0 25.0 -10.9 17.9 470305820970. 37889370 12413. ## 10 Argentina 2002 2 Eduardo Alberto Duhalde -20.1 male 0 25.0 -10.9 17.9 470305820970. 37889370 12413. ## # … with 1,010 more rows Varias transformaciones a la vez: Algo como lo siguiente funcionará: mutate(df_aprob, wdi_pop_mill = wdi_pop / 1000000, wdi_gdp_pc = wdi_gdp / wdi_pop) ## # A tibble: 1,020 x 14 ## country year quarter president net_approval pres_sex pres_sex_d exec_corr gdp_growth unemp wdi_gdp wdi_pop wdi_pop_mill wdi_gdp_pc ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Argentina 2000 1 Fernando de la Rúa 40.1 male 0 14.0 -0.8 15 552151219031. 37057452 37.1 14900. ## 2 Argentina 2000 2 Fernando de la Rúa 16.4 male 0 14.0 -0.8 15 552151219031. 37057452 37.1 14900. ## 3 Argentina 2000 3 Fernando de la Rúa 24.0 male 0 14.0 -0.8 15 552151219031. 37057452 37.1 14900. ## 4 Argentina 2000 4 Fernando de la Rúa -18.3 male 0 14.0 -0.8 15 552151219031. 37057452 37.1 14900. ## 5 Argentina 2001 1 Fernando de la Rúa -6.97 male 0 14.0 -4.4 18.3 527807756979. 37471509 37.5 14086. ## 6 Argentina 2001 2 Fernando de la Rúa -20.1 male 0 14.0 -4.4 18.3 527807756979. 37471509 37.5 14086. ## 7 Argentina 2001 3 Fernando de la Rúa -19.4 male 0 14.0 -4.4 18.3 527807756979. 37471509 37.5 14086. ## 8 Argentina 2001 4 Fernando de la Rúa -23.2 male 0 14.0 -4.4 18.3 527807756979. 37471509 37.5 14086. ## 9 Argentina 2002 1 Eduardo Alberto Duhalde -2.01 male 0 25.0 -10.9 17.9 470305820970. 37889370 37.9 12413. ## 10 Argentina 2002 2 Eduardo Alberto Duhalde -20.1 male 0 25.0 -10.9 17.9 470305820970. 37889370 37.9 12413. ## # … with 1,010 more rows (Ejercicio D) Crea un nuevo data frame, que esté ordenado desde el país-año-trimeste con menor aprobación presidencial al con mayor aprobación presidencial (recuerda crear el nuevo objeto y ponerle un buen nombre!). Tu código: En tu nuevo objeto, obtén solo con las observaciones que tengan presidentas. Tu código: Crea una nueva variable, que registre el desempleo como proporción en vez de porcentaje. Tu código: Agregar/colapsar con summarize() / hacer operaciones por grupos con group_by() Podemos hacer resúmenes para la base de datos con summarize: summarize(df_aprob, prom_desemp = mean(unemp)) ## # A tibble: 1 x 1 ## prom_desemp ## &lt;dbl&gt; ## 1 7.04 Como antes, podemos hacer varios a la vez: summarize(df_aprob, prom_desemp = mean(unemp), prom_crec = mean(gdp_growth), prom_aprob = mean(net_approval)) ## # A tibble: 1 x 3 ## prom_desemp prom_crec prom_aprob ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 7.04 3.77 15.3 Resúmenes agrupados Lo realmente interesante es hacer resúmenes por grupos. Primero debemos tener una versión “agrupada” de la base de datos. Esta es igual que nuestra base original, pero R sabe que las siguientes operaciones que realicemos en ella deberán ser agrupadas (veamos la ligera diferencia cuando hacemos un resumen con glimpse()) df_aprob_por_pais &lt;- group_by(df_aprob, country) glimpse(df_aprob_por_pais) ## Rows: 1,020 ## Columns: 12 ## Groups: country [17] ## $ country &lt;chr&gt; &quot;Argentina&quot;, &quot;Argentina&quot;, &quot;Argentina&quot;, &quot;Argentina&quot;, &quot;Argentina&quot;, &quot;Argentina&quot;, &quot;Argentina&quot;, &quot;Argentina&quot;, &quot;Argentina&quot;, &quot;Argentina&quot;, &quot;Argentina&quot;, &quot;Argentina&quot;, &quot;Argentina&quot;, &quot;Argentina&quot;, &quot;Argentina&quot;, &quot;Argentina&quot;, &quot;Argentina&quot;, &quot;Arge… ## $ year &lt;dbl&gt; 2000, 2000, 2000, 2000, 2001, 2001, 2001, 2001, 2002, 2002, 2002, 2002, 2003, 2003, 2003, 2003, 2004, 2004, 2004, 2004, 2005, 2005, 2005, 2005, 2006, 2006, 2006, 2006, 2007, 2007, 2007, 2007, 2008, 2008, 2008, 2008, 2009, 2009… ## $ quarter &lt;dbl&gt; 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4… ## $ president &lt;chr&gt; &quot;Fernando de la Rúa&quot;, &quot;Fernando de la Rúa&quot;, &quot;Fernando de la Rúa&quot;, &quot;Fernando de la Rúa&quot;, &quot;Fernando de la Rúa&quot;, &quot;Fernando de la Rúa&quot;, &quot;Fernando de la Rúa&quot;, &quot;Fernando de la Rúa&quot;, &quot;Eduardo Alberto Duhalde&quot;, &quot;Eduardo Alberto Duhald… ## $ net_approval &lt;dbl&gt; 40.126, 16.390, 23.968, -18.254, -6.973, -20.082, -19.384, -23.182, -2.006, -20.075, -24.965, -16.831, -2.775, 26.511, 53.679, 52.975, 57.142, 52.756, 39.078, 44.899, 45.691, 45.429, 40.584, 43.390, 48.887, 46.757, 44.563, 43.… ## $ pres_sex &lt;chr&gt; &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;m… ## $ pres_sex_d &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0… ## $ exec_corr &lt;dbl&gt; 14.01525, 14.01525, 14.01525, 14.01525, 14.01525, 14.01525, 14.01525, 14.01525, 25.00388, 25.00388, 25.00388, 25.00388, 50.14544, 50.14544, 50.14544, 50.14544, 50.14544, 50.14544, 50.14544, 50.14544, 50.14544, 50.14544, 50.145… ## $ gdp_growth &lt;dbl&gt; -0.800000, -0.800000, -0.800000, -0.800000, -4.400000, -4.400000, -4.400000, -4.400000, -10.900000, -10.900000, -10.900000, -10.900000, 8.800000, 8.800000, 8.800000, 8.800000, 9.000000, 9.000000, 9.000000, 9.000000, 8.900000, … ## $ unemp &lt;dbl&gt; 15.0000, 15.0000, 15.0000, 15.0000, 18.3000, 18.3000, 18.3000, 18.3000, 17.9000, 17.9000, 17.9000, 17.9000, 19.9500, 17.4400, 16.1318, 14.4528, 14.2935, 14.6621, 13.1475, 11.9976, 12.9295, 11.9526, 11.1434, 10.0284, 11.3064, 1… ## $ wdi_gdp &lt;dbl&gt; 552151219031, 552151219031, 552151219031, 552151219031, 527807756979, 527807756979, 527807756979, 527807756979, 470305820970, 470305820970, 470305820970, 470305820970, 511866938234, 511866938234, 511866938234, 511866938234, 55… ## $ wdi_pop &lt;dbl&gt; 37057452, 37057452, 37057452, 37057452, 37471509, 37471509, 37471509, 37471509, 37889370, 37889370, 37889370, 37889370, 38309379, 38309379, 38309379, 38309379, 38728696, 38728696, 38728696, 38728696, 39145488, 39145488, 391454… Hagamos una operación de resumen en esta nueva base: summarize(df_aprob_por_pais, prom_desemp = mean(unemp), prom_crec = mean(gdp_growth), prom_aprob = mean(net_approval)) ## `summarise()` ungrouping output (override with `.groups` argument) ## # A tibble: 17 x 4 ## country prom_desemp prom_crec prom_aprob ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Argentina 11.0 2.72 16.7 ## 2 Bolivia 3.70 4.24 11.3 ## 3 Brazil 8.35 3.4 34.2 ## 4 Chile 8.18 4.33 5.71 ## 5 Colombia 12.5 4.35 27.1 ## 6 Costa Rica 6.73 4.15 14.5 ## 7 Ecuador 6.76 4.31 37.1 ## 8 El Salvador 5.75 1.87 39.1 ## 9 Guatemala 2.80 3.47 5.44 ## 10 Honduras 4.22 4.08 12.7 ## 11 Mexico 3.99 2.10 28.9 ## 12 Nicaragua 6.78 3.73 16.2 ## 13 Panama 8.45 6.31 14.2 ## 14 Paraguay 5.69 3.66 10.9 ## 15 Peru 4.32 5.30 -26.2 ## 16 Uruguay 10.3 3.08 26.9 ## 17 Venezuela 10.3 3.04 -14.8 Hacer cadenas de operaciones con las pipes (%&gt;%) La mayor parte del tiempo queremos hacer más de una operación en una base de datos. Por ejemplo, podríamos querer (1) crear una nueva variable con PIB per capita, y luego (2) filtrar las observaciones con valores iguales o mayores a la media de PIB per capita en toda la base: df_aprob_con_pib_pc &lt;- mutate(df_aprob, pib_pc = wdi_gdp / wdi_pop) filter(df_aprob_con_pib_pc, pib_pc &gt; mean(pib_pc)) ## # A tibble: 492 x 13 ## country year quarter president net_approval pres_sex pres_sex_d exec_corr gdp_growth unemp wdi_gdp wdi_pop pib_pc ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Argentina 2000 1 Fernando de la Rúa 40.1 male 0 14.0 -0.8 15 552151219031. 37057452 14900. ## 2 Argentina 2000 2 Fernando de la Rúa 16.4 male 0 14.0 -0.8 15 552151219031. 37057452 14900. ## 3 Argentina 2000 3 Fernando de la Rúa 24.0 male 0 14.0 -0.8 15 552151219031. 37057452 14900. ## 4 Argentina 2000 4 Fernando de la Rúa -18.3 male 0 14.0 -0.8 15 552151219031. 37057452 14900. ## 5 Argentina 2001 1 Fernando de la Rúa -6.97 male 0 14.0 -4.4 18.3 527807756979. 37471509 14086. ## 6 Argentina 2001 2 Fernando de la Rúa -20.1 male 0 14.0 -4.4 18.3 527807756979. 37471509 14086. ## 7 Argentina 2001 3 Fernando de la Rúa -19.4 male 0 14.0 -4.4 18.3 527807756979. 37471509 14086. ## 8 Argentina 2001 4 Fernando de la Rúa -23.2 male 0 14.0 -4.4 18.3 527807756979. 37471509 14086. ## 9 Argentina 2002 1 Eduardo Alberto Duhalde -2.01 male 0 25.0 -10.9 17.9 470305820970. 37889370 12413. ## 10 Argentina 2002 2 Eduardo Alberto Duhalde -20.1 male 0 25.0 -10.9 17.9 470305820970. 37889370 12413. ## # … with 482 more rows Esta misma cadena de operaciones se puede escribir de la siguiente forma: df_aprob %&gt;% mutate(pib_pc = wdi_gdp / wdi_pop) %&gt;% filter(pib_pc &gt; mean(pib_pc)) ## # A tibble: 492 x 13 ## country year quarter president net_approval pres_sex pres_sex_d exec_corr gdp_growth unemp wdi_gdp wdi_pop pib_pc ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Argentina 2000 1 Fernando de la Rúa 40.1 male 0 14.0 -0.8 15 552151219031. 37057452 14900. ## 2 Argentina 2000 2 Fernando de la Rúa 16.4 male 0 14.0 -0.8 15 552151219031. 37057452 14900. ## 3 Argentina 2000 3 Fernando de la Rúa 24.0 male 0 14.0 -0.8 15 552151219031. 37057452 14900. ## 4 Argentina 2000 4 Fernando de la Rúa -18.3 male 0 14.0 -0.8 15 552151219031. 37057452 14900. ## 5 Argentina 2001 1 Fernando de la Rúa -6.97 male 0 14.0 -4.4 18.3 527807756979. 37471509 14086. ## 6 Argentina 2001 2 Fernando de la Rúa -20.1 male 0 14.0 -4.4 18.3 527807756979. 37471509 14086. ## 7 Argentina 2001 3 Fernando de la Rúa -19.4 male 0 14.0 -4.4 18.3 527807756979. 37471509 14086. ## 8 Argentina 2001 4 Fernando de la Rúa -23.2 male 0 14.0 -4.4 18.3 527807756979. 37471509 14086. ## 9 Argentina 2002 1 Eduardo Alberto Duhalde -2.01 male 0 25.0 -10.9 17.9 470305820970. 37889370 12413. ## 10 Argentina 2002 2 Eduardo Alberto Duhalde -20.1 male 0 25.0 -10.9 17.9 470305820970. 37889370 12413. ## # … with 482 more rows ¡Este código es sorprendemente legible! Las pipes (%&gt;%) se leen como “luego” (o “pero luego”) y se insertan con Ctrl/Cmd + Shift + M en RStudio. Pueden ver todos los atajos de teclado en Help &gt; Keyboard Shortcuts Help. Uno de los usos más comunes de las pipes es el combo group_by() + summarize(). Repitamos nuestras operaciones de antes para hacer un resumen agrupado: df_aprob %&gt;% group_by(country) %&gt;% summarize(prom_desemp = mean(unemp), prom_crec = mean(gdp_growth), prom_aprob = mean(net_approval)) ## `summarise()` ungrouping output (override with `.groups` argument) ## # A tibble: 17 x 4 ## country prom_desemp prom_crec prom_aprob ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Argentina 11.0 2.72 16.7 ## 2 Bolivia 3.70 4.24 11.3 ## 3 Brazil 8.35 3.4 34.2 ## 4 Chile 8.18 4.33 5.71 ## 5 Colombia 12.5 4.35 27.1 ## 6 Costa Rica 6.73 4.15 14.5 ## 7 Ecuador 6.76 4.31 37.1 ## 8 El Salvador 5.75 1.87 39.1 ## 9 Guatemala 2.80 3.47 5.44 ## 10 Honduras 4.22 4.08 12.7 ## 11 Mexico 3.99 2.10 28.9 ## 12 Nicaragua 6.78 3.73 16.2 ## 13 Panama 8.45 6.31 14.2 ## 14 Paraguay 5.69 3.66 10.9 ## 15 Peru 4.32 5.30 -26.2 ## 16 Uruguay 10.3 3.08 26.9 ## 17 Venezuela 10.3 3.04 -14.8 (Ejercicios E-G) E. Calcula, ayudándote de las pipes, la mediana por país de corrupción ejecutiva y PIB. Recuerda que puedes insertar chunks con Ctrl/Cmd + Alt + i y pipes con Ctrl/Cmd + Shift + M. Tu código: F. De nuevo usando pipes, ordena los países en la base desde el que tuvo el mayor PIB per cápita promedio en el período 2010-2014 hasta el que tuvo el menor. Tu código: G. ¿Qué país-año-trimestre, entre los gobernados por mujeres, tuvo la corrupción ejecutiva más alta? ¿Y la aprobación neta más alta? "],
["manejo-2b.html", "02B - Manejo de datos (ejercicio) Contexto A. B. C. D. E. F.", " 02B - Manejo de datos (ejercicio) Si quieres correr este script localmente, debe haber descargado el proyecto, como se explica en el script 2A. Recomiendo reiniciar R antes de comenzar: Session &gt; Restart R y click en la escoba del panel de “Environment” (superior derecho). Contexto La base de datos de este ejercicio guarda relación con la política monetaria ante la Gran Depresión. En especial, trata sobre la crisis en Mississippi, donde la administración central de los bancos estaba en manos de Bancos Centrales con distintas políticas: “el Banco Central de Atlanta, encargado del Distrito 6, estuvo a favor de prestarle dinero a los bancos en problemas. En cambio, el Banco Central de St. Louis se encargó del Distrito 8 de acuerdo a la Doctrica de las Letras Reales’, que sostiene que los Bancos Centrales deben restringir el crédito durante una recesión económica” (Angrist &amp; Pischke, 2014, cap. 5) ¿Qué política monetaria fue más efectiva para combatir la crisis desde la perspectiva financiera? Podemos analizar cuántos bancos quebraron a cada lado de la política para entender mejor esto. A. Comienza cargando el tidyverse y la base de datos, que se encuentra en la carpeta “datos” (recuerda ponerle un buen nombre). El nombre del archivo es “banks2.csv”. Tu código: B. Analiza la base. ¿Qué información tiene? ¿Cuál es la unidad de análisis? Considera que “bib” significa “banks in business”. Tu respuesta: C. Obtén solo las observaciones del primero de julio de cada año. Esto nos permitirá analizar patrones anuales. Crea una nueva base de datos con esta nueva unidad de análisis. Tu código: D. Revisa el archivo de ayuda de la función diff(). Para cada zona de Banco Central, ¿cuál es la diferencia de bancos en operación al comparar 1929 con 1934? Tu código: E. Repite el ejercicio anterior, pero calculando la diferencia en términos proporcionales. Tu código: F. ¿En qué mes del año (enero, febrero, etc.) fueron más pronunciados los cierres de bancos, en promedio? "],
["manejo-2c.html", "02C - Manejo de datos (extras) Cargar y guardar bases de datos Versiones iterativas de summarize() y mutate()", " 02C - Manejo de datos (extras) Si quieres correr este script localmente, debe haber descargado el proyecto, como se explica en el script 2A. Como al principio de todo script, recomiendo reiniciar R. Esto lo conseguimos con Session &gt; Restart R y clickeando en la escoba del panel de “Environment” (superior derecho). Ahora carguemos los paquetes que usaremos: library(tidyverse) library(readxl) # leer datos de Excel # install.packages(c(&quot;janitor&quot;, &quot;writexl&quot;)) library(janitor) # limpiar bases library(writexl) # guardar bases de Excel Cargar y guardar bases de datos Cargar desde múltiples formatos Hay múltiples formatos en los podemos encontrar bases de datos tabulares. Por suerte, la consistencia del tidyverse nos permite usar funciones muy similares para trabajar con ellas en R (Araya y Cruz, 2019). Extensión Descripción Función .csv Archivo delimitado por comas read_csv() .dta Stata (suele incluir etiquetas) haven::read_stata() .Rdata R (puede tener múltiples objetos) load() .rds R (un solo objeto) read_rds() .sav SPSS (suele incluir etiquetas) haven::read_spss() .xlsx Excel 2007- writexl::read_excel() Limpiar nombres de columnas En esta ocasión cargaremos unos datos en formato Excel. Es muy común encontrar datos que tienen este tipo de extensión, y en general no vienen demasiado limpios (el trabajo con planillas no necesariamente se hace pensando en el procesamiento con código). Inspeccionémoslos visualmente. Son datos de casos policiales en 2016 para 340 comunas de Chile, recolectados desde la Subsecretaría de Prevención del Delito (2017). Habiendo cargando el paquete readxl antes, la sintaxis para cargar los datos será familiar: df_casos_policiales &lt;- read_excel(&quot;datos/casos_delitos_por_comuna.xlsx&quot;) glimpse(df_casos_policiales) ## Rows: 340 ## Columns: 17 ## $ Comuna &lt;chr&gt; &quot;Algarrobo&quot;, &quot;Alhué&quot;, &quot;Alto-Biobío&quot;, &quot;Alto-del-Carmen&quot;, &quot;Alto-Hospicio&quot;, &quot;Ancud&quot;, &quot;Andacollo&quot;, &quot;Angol&quot;, &quot;Antártica&quot;, &quot;Antofagasta&quot;, &quot;Antuco&quot;, &quot;Arauco&quot;, &quot;Arica&quot;, &quot;Aysén&quot;, &quot;Buin&quot;, &quot;Bulnes&quot;, &quot;Cabil… ## $ `Comuna ID` &lt;dbl&gt; 5602, 13502, 8314, 3302, 1107, 10202, 4103, 9201, 12202, 2101, 8302, 8202, 15101, 11201, 13402, 8402, 5402, 12201, 8303, 2201, 10102, 3102, 13403, 5302, 15102, 1402, 4202, 8203, 9102, 5603, 5102… ## $ `Región ID` &lt;dbl&gt; 5, 13, 8, 3, 1, 10, 4, 9, 12, 2, 8, 8, 15, 11, 13, 16, 5, 12, 8, 2, 10, 3, 13, 5, 15, 1, 4, 8, 9, 5, 5, 10, 5, 7, 13, 13, 10, 3, 6, 8, 11, 16, 16, 6, 9, 10, 11, 16, 10, 11, 6, 16, 16, 6, 7, 1, 1… ## $ `Población (INE 2017)` &lt;dbl&gt; 10700, 5916, 5957, 6519, 124872, 44249, 11555, 55845, 202, 389812, 3906, 38431, 243701, 28283, 86079, 22042, 20135, 2906, 29563, 181897, 35282, 18101, 25528, 15021, 783, 1277, 9911, 34277, 26467… ## $ `Robos con violencia o intimidación` &lt;dbl&gt; 23, 5, 1, 1, 396, 23, 11, 93, 0, 1150, 3, 40, 618, 18, 213, 17, 13, 0, 29, 652, 11, 67, 79, 16, 0, 0, 6, 53, 15, 121, 40, 57, 19, 34, 601, 587, 0, 29, 3, 204, 0, 30, 353, 30, 3, 8, 0, 1, 1, 0, 1… ## $ `Robos por sorpresa` &lt;dbl&gt; 11, 2, 1, 0, 222, 13, 6, 119, 0, 646, 0, 32, 451, 1, 154, 8, 10, 0, 4, 458, 4, 21, 15, 5, 0, 0, 0, 87, 10, 35, 19, 62, 13, 19, 227, 181, 0, 1, 2, 101, 0, 20, 426, 18, 1, 4, 0, 0, 0, 0, 1, 2, 4, … ## $ `Robos de vehículo motorizado` &lt;dbl&gt; 9, 2, 0, 0, 461, 2, 0, 41, 0, 987, 1, 5, 578, 0, 97, 10, 2, 0, 10, 686, 4, 23, 31, 6, 0, 0, 0, 18, 13, 34, 25, 9, 2, 13, 240, 144, 0, 5, 1, 61, 0, 14, 198, 5, 4, 0, 0, 0, 0, 0, 9, 4, 10, 4, 1, 4… ## $ `Robos de objeto de o desde vehículo` &lt;dbl&gt; 56, 1, 3, 1, 338, 30, 8, 58, 0, 1010, 3, 24, 546, 11, 195, 22, 20, 0, 30, 840, 9, 24, 68, 18, 1, 0, 15, 32, 11, 105, 73, 79, 5, 10, 530, 93, 1, 14, 2, 116, 0, 45, 441, 34, 2, 3, 0, 2, 1, 1, 12, … ## $ `Robos en lugar habitado` &lt;dbl&gt; 384, 18, 1, 6, 565, 111, 37, 261, 0, 1024, 3, 161, 524, 41, 399, 60, 51, 0, 102, 965, 44, 124, 119, 48, 5, 1, 28, 144, 35, 392, 132, 157, 30, 93, 206, 278, 1, 97, 7, 263, 4, 112, 737, 89, 19, 25… ## $ `Robos en lugar no habitado` &lt;dbl&gt; 80, 16, 7, 7, 193, 130, 20, 181, 0, 778, 6, 159, 382, 44, 271, 45, 42, 4, 106, 577, 62, 125, 79, 34, 3, 1, 16, 105, 34, 88, 108, 136, 40, 74, 295, 191, 6, 83, 19, 109, 17, 92, 505, 90, 12, 31, 1… ## $ `Otros robos con fuerza` &lt;dbl&gt; 5, 1, 0, 0, 23, 6, 3, 35, 0, 43, 1, 4, 105, 5, 17, 4, 1, 0, 28, 40, 3, 14, 6, 0, 0, 1, 17, 5, 0, 10, 4, 6, 0, 11, 39, 7, 0, 6, 0, 3, 0, 7, 80, 4, 2, 1, 0, 0, 0, 0, 3, 6, 6, 1, 2, 2, 23, 25, 0, 0… ## $ Hurtos &lt;dbl&gt; 184, 15, 18, 11, 791, 253, 39, 549, 0, 5445, 10, 312, 1735, 230, 513, 106, 48, 3, 170, 2156, 121, 206, 93, 57, 7, 1, 12, 252, 121, 236, 234, 702, 58, 243, 1201, 335, 17, 134, 49, 391, 38, 102, 2… ## $ `Lesiones menos graves, graves o gravísimas` &lt;dbl&gt; 22, 3, 16, 2, 130, 31, 9, 55, 0, 295, 1, 30, 343, 37, 63, 17, 19, 1, 29, 231, 37, 32, 28, 8, 1, 1, 3, 44, 20, 40, 34, 46, 24, 32, 78, 159, 3, 22, 6, 65, 5, 18, 156, 24, 8, 11, 7, 5, 2, 9, 17, 14… ## $ `Lesiones leves` &lt;dbl&gt; 52, 26, 24, 8, 523, 132, 77, 244, 0, 1528, 8, 106, 720, 143, 257, 66, 55, 5, 81, 1047, 114, 136, 66, 29, 6, 7, 18, 145, 64, 161, 127, 176, 43, 96, 358, 307, 10, 70, 37, 239, 28, 58, 453, 78, 40,… ## $ Homicidios &lt;dbl&gt; 0, 1, 0, 0, 1, 0, 0, 2, 0, 13, 0, 1, 6, 0, 3, 0, 0, 0, 0, 8, 0, 0, 0, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 2, 0, 8, 0, 1, 0, 0, 0, 1, 2, 1, 0, 0, 0, 0, 0, 1, 0, 1, 2, 0, 0, 0, 10, 2, 0, 0, 11, 5, 0, 2,… ## $ Violaciones &lt;dbl&gt; 1, 0, 3, 0, 20, 10, 1, 7, 0, 50, 0, 8, 47, 2, 12, 0, 1, 0, 3, 28, 13, 3, 3, 0, 2, 0, 1, 7, 4, 9, 7, 13, 1, 7, 6, 21, 1, 1, 0, 7, 0, 5, 32, 0, 0, 2, 0, 1, 0, 0, 4, 3, 0, 2, 3, 0, 26, 6, 3, 0, 61,… ## $ VIF &lt;dbl&gt; 129, 29, 62, 26, 1226, 330, 67, 508, 0, 2384, 34, 264, 1973, 314, 547, 177, 143, 13, 180, 1146, 369, 153, 120, 67, 3, 4, 31, 224, 123, 230, 219, 378, 119, 263, 521, 831, 22, 126, 77, 628, 19, 18… Los nombres de las columnas en la base tienen mayúsculas, espacios y tildes, lo que nos puede generar problemas en el análisis. La convención en el tidyverse es nombrar utilizando snake_case (nombre_de_mi_objeto), sin mayúsculas, espacios ni tildes. Esto nos ahorrará muchos problemas. Si ya tenemos una base de datos y queremos estandarizar sus variables, el paquete janitor provee la función clean_names() para esto: df_casos_policiales_l &lt;- df_casos_policiales %&gt;% clean_names() glimpse(df_casos_policiales_l) ## Rows: 340 ## Columns: 17 ## $ comuna &lt;chr&gt; &quot;Algarrobo&quot;, &quot;Alhué&quot;, &quot;Alto-Biobío&quot;, &quot;Alto-del-Carmen&quot;, &quot;Alto-Hospicio&quot;, &quot;Ancud&quot;, &quot;Andacollo&quot;, &quot;Angol&quot;, &quot;Antártica&quot;, &quot;Antofagasta&quot;, &quot;Antuco&quot;, &quot;Arauco&quot;, &quot;Arica&quot;, &quot;Aysén&quot;, &quot;Buin&quot;, &quot;Bulnes&quot;, &quot;Cabildo&quot;… ## $ comuna_id &lt;dbl&gt; 5602, 13502, 8314, 3302, 1107, 10202, 4103, 9201, 12202, 2101, 8302, 8202, 15101, 11201, 13402, 8402, 5402, 12201, 8303, 2201, 10102, 3102, 13403, 5302, 15102, 1402, 4202, 8203, 9102, 5603, 5102, 1… ## $ region_id &lt;dbl&gt; 5, 13, 8, 3, 1, 10, 4, 9, 12, 2, 8, 8, 15, 11, 13, 16, 5, 12, 8, 2, 10, 3, 13, 5, 15, 1, 4, 8, 9, 5, 5, 10, 5, 7, 13, 13, 10, 3, 6, 8, 11, 16, 16, 6, 9, 10, 11, 16, 10, 11, 6, 16, 16, 6, 7, 1, 13, … ## $ poblacion_ine_2017 &lt;dbl&gt; 10700, 5916, 5957, 6519, 124872, 44249, 11555, 55845, 202, 389812, 3906, 38431, 243701, 28283, 86079, 22042, 20135, 2906, 29563, 181897, 35282, 18101, 25528, 15021, 783, 1277, 9911, 34277, 26467, 2… ## $ robos_con_violencia_o_intimidacion &lt;dbl&gt; 23, 5, 1, 1, 396, 23, 11, 93, 0, 1150, 3, 40, 618, 18, 213, 17, 13, 0, 29, 652, 11, 67, 79, 16, 0, 0, 6, 53, 15, 121, 40, 57, 19, 34, 601, 587, 0, 29, 3, 204, 0, 30, 353, 30, 3, 8, 0, 1, 1, 0, 18, … ## $ robos_por_sorpresa &lt;dbl&gt; 11, 2, 1, 0, 222, 13, 6, 119, 0, 646, 0, 32, 451, 1, 154, 8, 10, 0, 4, 458, 4, 21, 15, 5, 0, 0, 0, 87, 10, 35, 19, 62, 13, 19, 227, 181, 0, 1, 2, 101, 0, 20, 426, 18, 1, 4, 0, 0, 0, 0, 1, 2, 4, 0, … ## $ robos_de_vehiculo_motorizado &lt;dbl&gt; 9, 2, 0, 0, 461, 2, 0, 41, 0, 987, 1, 5, 578, 0, 97, 10, 2, 0, 10, 686, 4, 23, 31, 6, 0, 0, 0, 18, 13, 34, 25, 9, 2, 13, 240, 144, 0, 5, 1, 61, 0, 14, 198, 5, 4, 0, 0, 0, 0, 0, 9, 4, 10, 4, 1, 4, 1… ## $ robos_de_objeto_de_o_desde_vehiculo &lt;dbl&gt; 56, 1, 3, 1, 338, 30, 8, 58, 0, 1010, 3, 24, 546, 11, 195, 22, 20, 0, 30, 840, 9, 24, 68, 18, 1, 0, 15, 32, 11, 105, 73, 79, 5, 10, 530, 93, 1, 14, 2, 116, 0, 45, 441, 34, 2, 3, 0, 2, 1, 1, 12, 14,… ## $ robos_en_lugar_habitado &lt;dbl&gt; 384, 18, 1, 6, 565, 111, 37, 261, 0, 1024, 3, 161, 524, 41, 399, 60, 51, 0, 102, 965, 44, 124, 119, 48, 5, 1, 28, 144, 35, 392, 132, 157, 30, 93, 206, 278, 1, 97, 7, 263, 4, 112, 737, 89, 19, 25, 3… ## $ robos_en_lugar_no_habitado &lt;dbl&gt; 80, 16, 7, 7, 193, 130, 20, 181, 0, 778, 6, 159, 382, 44, 271, 45, 42, 4, 106, 577, 62, 125, 79, 34, 3, 1, 16, 105, 34, 88, 108, 136, 40, 74, 295, 191, 6, 83, 19, 109, 17, 92, 505, 90, 12, 31, 15, … ## $ otros_robos_con_fuerza &lt;dbl&gt; 5, 1, 0, 0, 23, 6, 3, 35, 0, 43, 1, 4, 105, 5, 17, 4, 1, 0, 28, 40, 3, 14, 6, 0, 0, 1, 17, 5, 0, 10, 4, 6, 0, 11, 39, 7, 0, 6, 0, 3, 0, 7, 80, 4, 2, 1, 0, 0, 0, 0, 3, 6, 6, 1, 2, 2, 23, 25, 0, 0, 1… ## $ hurtos &lt;dbl&gt; 184, 15, 18, 11, 791, 253, 39, 549, 0, 5445, 10, 312, 1735, 230, 513, 106, 48, 3, 170, 2156, 121, 206, 93, 57, 7, 1, 12, 252, 121, 236, 234, 702, 58, 243, 1201, 335, 17, 134, 49, 391, 38, 102, 2308… ## $ lesiones_menos_graves_graves_o_gravisimas &lt;dbl&gt; 22, 3, 16, 2, 130, 31, 9, 55, 0, 295, 1, 30, 343, 37, 63, 17, 19, 1, 29, 231, 37, 32, 28, 8, 1, 1, 3, 44, 20, 40, 34, 46, 24, 32, 78, 159, 3, 22, 6, 65, 5, 18, 156, 24, 8, 11, 7, 5, 2, 9, 17, 14, 2… ## $ lesiones_leves &lt;dbl&gt; 52, 26, 24, 8, 523, 132, 77, 244, 0, 1528, 8, 106, 720, 143, 257, 66, 55, 5, 81, 1047, 114, 136, 66, 29, 6, 7, 18, 145, 64, 161, 127, 176, 43, 96, 358, 307, 10, 70, 37, 239, 28, 58, 453, 78, 40, 46… ## $ homicidios &lt;dbl&gt; 0, 1, 0, 0, 1, 0, 0, 2, 0, 13, 0, 1, 6, 0, 3, 0, 0, 0, 0, 8, 0, 0, 0, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 2, 0, 8, 0, 1, 0, 0, 0, 1, 2, 1, 0, 0, 0, 0, 0, 1, 0, 1, 2, 0, 0, 0, 10, 2, 0, 0, 11, 5, 0, 2, 4,… ## $ violaciones &lt;dbl&gt; 1, 0, 3, 0, 20, 10, 1, 7, 0, 50, 0, 8, 47, 2, 12, 0, 1, 0, 3, 28, 13, 3, 3, 0, 2, 0, 1, 7, 4, 9, 7, 13, 1, 7, 6, 21, 1, 1, 0, 7, 0, 5, 32, 0, 0, 2, 0, 1, 0, 0, 4, 3, 0, 2, 3, 0, 26, 6, 3, 0, 61, 18… ## $ vif &lt;dbl&gt; 129, 29, 62, 26, 1226, 330, 67, 508, 0, 2384, 34, 264, 1973, 314, 547, 177, 143, 13, 180, 1146, 369, 153, 120, 67, 3, 4, 31, 224, 123, 230, 219, 378, 119, 263, 521, 831, 22, 126, 77, 628, 19, 188, … (Ejercicios A-B) A. ¿Cuál fue la comuna con más homicidios en Chile en el año 2016? Tu código: B. ¿Cuál fue la comuna con más casos de violencia intrafamiliar por cada 1000 habitantes? Tu código: Crear bases de datos “a mano” A veces queremos crear un data frame arbitrariamente a partir de vectores. Para esto, la funcióm tibble() es simple y útil: df_ejemplo &lt;- tibble( x = c(1:10), y = c(9, 10, 1:8) ) df_ejemplo ## # A tibble: 10 x 2 ## x y ## &lt;int&gt; &lt;dbl&gt; ## 1 1 9 ## 2 2 10 ## 3 3 1 ## 4 4 2 ## 5 5 3 ## 6 6 4 ## 7 7 5 ## 8 8 6 ## 9 9 7 ## 10 10 8 Guardar bases de datos Guardar una base de datos es necesario para compartirla con colegas o usarla en otros proyectos. La mayoría de las funciones que vimos, que comienzan con read_, tienen su versión write_ para este propósito. Por ejemplo, read_csv() -&gt; write_csv(). El único par de comandos en los que hay algo distinto es readxl::read_excel() -&gt; writexl::write_xlsx(). En general, los mejores formatos para guardar bases son .csv (muy universal) y .rds (nos aseguramos de que cualquier cosa extraña en nuestros datos pueda volver bien a R). Guardemos los datos en formatos .csv, .rds y .xlsx (Excel). Recuerda que ya cargamos antes el paquete writexl, que nos permite hacer esto último. write_csv(df_ejemplo, &quot;df_ejemplo.csv&quot;) write_csv(df_ejemplo, &quot;df_ejemplo.rds&quot;) write_xlsx(df_ejemplo, &quot;df_ejemplo.xlsx&quot;) Podríamos volver a cargarlo con read_excel(): df_ejemplo_comprob &lt;- read_excel(&quot;df_ejemplo.xlsx&quot;) df_ejemplo_comprob ## # A tibble: 10 x 2 ## x y ## &lt;dbl&gt; &lt;dbl&gt; ## 1 1 9 ## 2 2 10 ## 3 3 1 ## 4 4 2 ## 5 5 3 ## 6 6 4 ## 7 7 5 ## 8 8 6 ## 9 9 7 ## 10 10 8 (Ejercicio) Guarda una versión de la base de datos de delitos, en formato csv. Utiliza la versión con los nombres de columnas limpios y excluye la variable de región. Tu código: Versiones iterativas de summarize() y mutate() Es común necesitar hacer una misma operación en múltiples columnas de una base. Por ejemplo, podríamos querer los totales de delitos específicos por región, como muestra el siguiente chunk. df_casos_policiales_l %&gt;% group_by(region_id) %&gt;% summarize(lesiones_leves_total = sum(lesiones_leves), hurtos_total = sum(hurtos)) ## `summarise()` ungrouping output (override with `.groups` argument) ## # A tibble: 16 x 3 ## region_id lesiones_leves_total hurtos_total ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 1523 3935 ## 2 2 3014 8257 ## 3 3 1253 2953 ## 4 4 2830 6613 ## 5 5 6955 19537 ## 6 6 3347 8553 ## 7 7 2368 7371 ## 8 8 4549 13698 ## 9 9 3227 9808 ## 10 10 2824 9575 ## 11 11 486 1169 ## 12 12 525 1568 ## 13 13 22796 65621 ## 14 14 1269 3783 ## 15 15 733 1762 ## 16 16 1250 3644 Sin embargo, hacer este código para los 13 tipos de delito es una pérdida de tiempo: generaría código particularmente difícil de leer. Podemos aplicar la función summarize_at() para usar la función de suma en múltiples variables. Noten cómo en el código siguiente “.” reemplazará a la variable en la definición de la operación (gracias al operador “~”). df_casos_policiales_l %&gt;% group_by(region_id) %&gt;% summarize_at(.vars = vars(robos_con_violencia_o_intimidacion:vif), .funs = ~sum(.)) ## # A tibble: 16 x 14 ## region_id robos_con_violencia_o_int… robos_por_sorpresa robos_de_vehiculo_moto… robos_de_objeto_de_o_des… robos_en_lugar_hab… robos_en_lugar_no_ha… otros_robos_con_fu… hurtos lesiones_menos_graves_grave… lesiones_leves homicidios violaciones vif ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 1554 1499 1339 1773 1287 822 159 3935 346 1523 9 51 3321 ## 2 2 1930 1173 1754 1999 2348 1702 143 8257 599 3014 25 97 4192 ## 3 3 832 379 355 792 1299 1346 138 2953 345 1253 7 40 2266 ## 4 4 1667 1106 848 2355 4000 2450 272 6613 608 2830 13 116 4801 ## 5 5 5777 4537 2994 6062 9657 5580 402 19537 1652 6955 44 263 11639 ## 6 6 1629 1011 836 1842 3842 3246 330 8553 844 3347 15 116 6590 ## 7 7 1108 852 411 1050 2886 2277 311 7371 621 2368 19 95 5342 ## 8 8 4646 2664 2191 3057 4972 4283 360 13698 1342 4549 53 218 9362 ## 9 9 1547 1331 1518 1574 3902 2609 304 9808 873 3227 27 194 7781 ## 10 10 1025 728 399 1683 2698 2543 151 9575 761 2824 20 170 7253 ## 11 11 71 26 50 60 175 210 15 1169 204 486 4 15 1085 ## 12 12 112 29 274 162 279 262 25 1568 159 525 5 25 959 ## 13 13 41541 19168 15364 36183 19585 18223 2811 65621 5554 22796 215 976 41674 ## 14 14 424 339 244 711 1681 1074 137 3783 337 1269 14 82 3148 ## 15 15 618 451 579 549 532 389 105 1762 346 733 6 50 1989 ## 16 16 605 513 315 701 1685 1191 158 3644 383 1250 11 71 3315 Incluso podemos editar un poco los nombres de los resúmenes, asignándolos como elementos en una lista. Noten cómo van a cambiar dichos nombres, terminando ahora en \"_total\": df_casos_policiales_l %&gt;% group_by(region_id) %&gt;% summarize_at(.vars = vars(robos_con_violencia_o_intimidacion:vif), .funs = list(total = ~sum(.))) ## # A tibble: 16 x 14 ## region_id robos_con_violencia_… robos_por_sorpres… robos_de_vehiculo_m… robos_de_objeto_de_o… robos_en_lugar_hab… robos_en_lugar_no… otros_robos_con_f… hurtos_total lesiones_menos_grave… lesiones_leves_… homicidios_total violaciones_tot… vif_total ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 1554 1499 1339 1773 1287 822 159 3935 346 1523 9 51 3321 ## 2 2 1930 1173 1754 1999 2348 1702 143 8257 599 3014 25 97 4192 ## 3 3 832 379 355 792 1299 1346 138 2953 345 1253 7 40 2266 ## 4 4 1667 1106 848 2355 4000 2450 272 6613 608 2830 13 116 4801 ## 5 5 5777 4537 2994 6062 9657 5580 402 19537 1652 6955 44 263 11639 ## 6 6 1629 1011 836 1842 3842 3246 330 8553 844 3347 15 116 6590 ## 7 7 1108 852 411 1050 2886 2277 311 7371 621 2368 19 95 5342 ## 8 8 4646 2664 2191 3057 4972 4283 360 13698 1342 4549 53 218 9362 ## 9 9 1547 1331 1518 1574 3902 2609 304 9808 873 3227 27 194 7781 ## 10 10 1025 728 399 1683 2698 2543 151 9575 761 2824 20 170 7253 ## 11 11 71 26 50 60 175 210 15 1169 204 486 4 15 1085 ## 12 12 112 29 274 162 279 262 25 1568 159 525 5 25 959 ## 13 13 41541 19168 15364 36183 19585 18223 2811 65621 5554 22796 215 976 41674 ## 14 14 424 339 244 711 1681 1074 137 3783 337 1269 14 82 3148 ## 15 15 618 451 579 549 532 389 105 1762 346 733 6 50 1989 ## 16 16 605 513 315 701 1685 1191 158 3644 383 1250 11 71 3315 También podemos utilizar más de una función de resumen a la vez en nuestros datos: df_casos_policiales_l %&gt;% group_by(region_id) %&gt;% summarize_at(.vars = vars(robos_con_violencia_o_intimidacion:vif), .funs = list(total = ~sum(.), max = ~max(.))) ## # A tibble: 16 x 27 ## region_id robos_con_viole… robos_por_sorpr… robos_de_vehicu… robos_de_objeto… robos_en_lugar_… robos_en_lugar_… otros_robos_con… hurtos_total lesiones_menos_… lesiones_leves_… homicidios_total violaciones_tot… vif_total robos_con_viole… ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 1554 1499 1339 1773 1287 822 159 3935 346 1523 9 51 3321 1132 ## 2 2 1930 1173 1754 1999 2348 1702 143 8257 599 3014 25 97 4192 1150 ## 3 3 832 379 355 792 1299 1346 138 2953 345 1253 7 40 2266 615 ## 4 4 1667 1106 848 2355 4000 2450 272 6613 608 2830 13 116 4801 723 ## 5 5 5777 4537 2994 6062 9657 5580 402 19537 1652 6955 44 263 11639 1924 ## 6 6 1629 1011 836 1842 3842 3246 330 8553 844 3347 15 116 6590 825 ## 7 7 1108 852 411 1050 2886 2277 311 7371 621 2368 19 95 5342 627 ## 8 8 4646 2664 2191 3057 4972 4283 360 13698 1342 4549 53 218 9362 1708 ## 9 9 1547 1331 1518 1574 3902 2609 304 9808 873 3227 27 194 7781 876 ## 10 10 1025 728 399 1683 2698 2543 151 9575 761 2824 20 170 7253 512 ## 11 11 71 26 50 60 175 210 15 1169 204 486 4 15 1085 52 ## 12 12 112 29 274 162 279 262 25 1568 159 525 5 25 959 99 ## 13 13 41541 19168 15364 36183 19585 18223 2811 65621 5554 22796 215 976 41674 4302 ## 14 14 424 339 244 711 1681 1074 137 3783 337 1269 14 82 3148 304 ## 15 15 618 451 579 549 532 389 105 1762 346 733 6 50 1989 618 ## 16 16 605 513 315 701 1685 1191 158 3644 383 1250 11 71 3315 353 ## # … with 12 more variables: robos_por_sorpresa_max &lt;dbl&gt;, robos_de_vehiculo_motorizado_max &lt;dbl&gt;, robos_de_objeto_de_o_desde_vehiculo_max &lt;dbl&gt;, robos_en_lugar_habitado_max &lt;dbl&gt;, robos_en_lugar_no_habitado_max &lt;dbl&gt;, ## # otros_robos_con_fuerza_max &lt;dbl&gt;, hurtos_max &lt;dbl&gt;, lesiones_menos_graves_graves_o_gravisimas_max &lt;dbl&gt;, lesiones_leves_max &lt;dbl&gt;, homicidios_max &lt;dbl&gt;, violaciones_max &lt;dbl&gt;, vif_max &lt;dbl&gt; Aparte de hacer resúmenes, crear múltiples variables según una misma operación es bastante común. Supongamos que queremos las cifras relativas (tasas) para cada tipo de delito, como en el siguiente ejemplo: df_casos_policiales_l %&gt;% mutate(lesiones_leves_c1000 = lesiones_leves * 1000 / poblacion_ine_2017) %&gt;% select(comuna, poblacion_ine_2017, lesiones_leves, lesiones_leves_c1000) # solo para legibilidad ## # A tibble: 340 x 4 ## comuna poblacion_ine_2017 lesiones_leves lesiones_leves_c1000 ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Algarrobo 10700 52 4.86 ## 2 Alhué 5916 26 4.39 ## 3 Alto-Biobío 5957 24 4.03 ## 4 Alto-del-Carmen 6519 8 1.23 ## 5 Alto-Hospicio 124872 523 4.19 ## 6 Ancud 44249 132 2.98 ## 7 Andacollo 11555 77 6.66 ## 8 Angol 55845 244 4.37 ## 9 Antártica 202 0 0 ## 10 Antofagasta 389812 1528 3.92 ## # … with 330 more rows Podemos utilizar mutate_at() para repetir esta operación en todas nuestras variables de interés. df_casos_policiales_l %&gt;% mutate_at(.vars = vars(robos_con_violencia_o_intimidacion:vif), .funs = list(c1000 = ~ . * 1000 / poblacion_ine_2017)) ## # A tibble: 340 x 30 ## comuna comuna_id region_id poblacion_ine_2… robos_con_viole… robos_por_sorpr… robos_de_vehicu… robos_de_objeto… robos_en_lugar_… robos_en_lugar_… otros_robos_con… hurtos lesiones_menos_… lesiones_leves homicidios violaciones vif robos_con_viole… ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Algar… 5602 5 10700 23 11 9 56 384 80 5 184 22 52 0 1 129 2.15 ## 2 Alhué 13502 13 5916 5 2 2 1 18 16 1 15 3 26 1 0 29 0.845 ## 3 Alto-… 8314 8 5957 1 1 0 3 1 7 0 18 16 24 0 3 62 0.168 ## 4 Alto-… 3302 3 6519 1 0 0 1 6 7 0 11 2 8 0 0 26 0.153 ## 5 Alto-… 1107 1 124872 396 222 461 338 565 193 23 791 130 523 1 20 1226 3.17 ## 6 Ancud 10202 10 44249 23 13 2 30 111 130 6 253 31 132 0 10 330 0.520 ## 7 Andac… 4103 4 11555 11 6 0 8 37 20 3 39 9 77 0 1 67 0.952 ## 8 Angol 9201 9 55845 93 119 41 58 261 181 35 549 55 244 2 7 508 1.67 ## 9 Antár… 12202 12 202 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ## 10 Antof… 2101 2 389812 1150 646 987 1010 1024 778 43 5445 295 1528 13 50 2384 2.95 ## # … with 330 more rows, and 12 more variables: robos_por_sorpresa_c1000 &lt;dbl&gt;, robos_de_vehiculo_motorizado_c1000 &lt;dbl&gt;, robos_de_objeto_de_o_desde_vehiculo_c1000 &lt;dbl&gt;, robos_en_lugar_habitado_c1000 &lt;dbl&gt;, robos_en_lugar_no_habitado_c1000 &lt;dbl&gt;, ## # otros_robos_con_fuerza_c1000 &lt;dbl&gt;, hurtos_c1000 &lt;dbl&gt;, lesiones_menos_graves_graves_o_gravisimas_c1000 &lt;dbl&gt;, lesiones_leves_c1000 &lt;dbl&gt;, homicidios_c1000 &lt;dbl&gt;, violaciones_c1000 &lt;dbl&gt;, vif_c1000 &lt;dbl&gt; (Ejercicio C) Si queremos obtener un promedio por región en datos como estos, debemos calcular un promedio ponderado: si es que no hacemos esto, comunas con pocos habitantes estarán sobrerrepresentadas en los promedios. Un ejemplo a continuación: df_casos_policiales_l %&gt;% group_by(region_id) %&gt;% summarize(prom_hurtos = weighted.mean(hurtos, w = poblacion_ine_2017)) ## `summarise()` ungrouping output (override with `.groups` argument) ## # A tibble: 16 x 2 ## region_id prom_hurtos ## &lt;dbl&gt; &lt;dbl&gt; ## 1 1 1968. ## 2 2 3941. ## 3 3 1216. ## 4 4 1543. ## 5 5 2039. ## 6 6 1139. ## 7 7 1305. ## 8 8 1304. ## 9 9 1608. ## 10 10 1826. ## 11 11 513. ## 12 12 990. ## 13 13 2329. ## 14 14 1064. ## 15 15 1711. ## 16 16 938. Para cada tipo de delito, obtén el promedio ponderado por región. Tu código: "],
["manejo-2d.html", "02D - Manejo de datos (ejercicio int.)", " 02D - Manejo de datos (ejercicio int.) (este ejercicio interactivo solo se puede ejecutar en RStudio Cloud) "],
["visualizacion-preceptos.html", "03 - Visualización de datos (preceptos)", " 03 - Visualización de datos (preceptos) Esta clase asincrónica esta disponible en la carpeta de grabaciones del curso (acceso con cuenta UC). Link a las diapositivas. Link al ejercicio con décimas (acceso con cuenta UC) "],
["visualizacion-intro.html", "03A - Visualización de datos (intro) Inicio: cargar paquetes, base de datos Gráficos univariados Gráficos bivariados Un poco de personalización: etiquetas", " 03A - Visualización de datos (intro) Si quieres correr estos scripts localmente, acá puedes descargar el proyecto comprimido en .zip. Paquetes que necesitas tener instalados antes de comenzar con el proyecto (3A, 3B, 3C): tidyverse, ggrepel. Ilustración de Allison Horst. Inicio: cargar paquetes, base de datos library(tidyverse) Carga de base en formato rds Hoy tenemos una base de datos con información de los municipios, construida a partir de dos fuentes: la encuesta Casen 2017 y los resultados de las elecciones municipales del año 2016. df_municipios &lt;- read_rds(&quot;datos/datos_municipios.rds&quot;) ¿Te queda claro la información que registra cada variable? Si es que no, haz tus apuntes aquí: Gráficos univariados Gráfico univariado para variable categórica (barras) Veamos la distribución de las coaliciones de los alcaldes en las comunas: ggplot(data = df_municipios, mapping = aes(x = alcalde_coalicion)) + geom_bar() Si queremos invertir los ejes, podemos usar el mapeo estético y = en vez de x =: ggplot(data = df_municipios, mapping = aes(y = alcalde_coalicion)) + geom_bar() Gráfico univariado para variable continua (histograma) Veamos la distribución del % de población rural en las comunas: ggplot(data = df_municipios, mapping = aes(x = porc_rural)) + geom_histogram() ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. Podemos controlar cómo se arma el histograma en los argumentos de geom_histogram(): bindwidth = 5 hace que nuestros bins tengan un ancho de 5. boundary = 0 asegura que los bins partan en 0, en vez de intentar centrarse en los números enteros (el defecto). closed = \"left\" ayuda a ggplot2 a decidir qué hacer con los valores que caen exactamente en los límites del bin. El valor “left” determina que los bins están cerrados a la izquierda, es decir, un valor intermedio caerá en la barra de la derecha. El valor “right”, el defecto, dirá que los bins están cerrados a la derecha, es decir, un valor intermedio caerá en la barra de la izquierda. ggplot(data = df_municipios, mapping = aes(x = porc_rural)) + geom_histogram(binwidth = 5, boundary = 0, closed = &quot;left&quot;) (Ejercicio A) Genera un gráfico univariado para alguna de la variables de la base de datos. ¿Hay algún patrón interesante? Tu código (recuerda, los chunks se insertan con Ctrl/Cmd+Shift+i): Gráficos bivariados Gráfico bivariado para dos variables continuas (dispersión) Observemos la relación entre la variable de población mapuche en la comuna y su índice de pobreza multidimensional: ggplot(data = df_municipios, mapping = aes(x = porc_mapuche, y = porc_pobres_md4)) + geom_point(size = 2) Podemos añadir color y forma a los puntos según las coaliciones de los alcaldes: ggplot(data = df_municipios, mapping = aes(x = porc_mapuche, y = porc_pobres_md4, color = alcalde_coalicion, shape = alcalde_coalicion)) + geom_point(size = 2) Gráfico bivariado para x discreta + y continua: boxplot/violin Veamos la relación entre la coalición del edil y la pobreza de la comuna: ggplot(data = df_municipios, mapping = aes(x = alcalde_coalicion, y = porc_pobres_md4)) + geom_boxplot() ggplot(data = df_municipios, mapping = aes(x = alcalde_coalicion, y = porc_pobres_md4)) + geom_violin() Gráfico bivariado para x discreta + y continua: columnas (ránking) ggplot(data = df_municipios %&gt;% group_by(alcalde_coalicion) %&gt;% summarize(porc_alcaldes_reelectos = sum(alcalde_reelecto) / n()), mapping = aes(x = alcalde_coalicion, y = porc_alcaldes_reelectos)) + geom_col() ## `summarise()` ungrouping output (override with `.groups` argument) A veces queremos hacer estos gráficos de forma horizontal (“gráfico de ránking”). Podemos hacer un cambio similar al anterior, con los mapeos estéticos invertidos. Luego aprenderemos a ordenar las barras, para hacer ránkings. ggplot(data = df_municipios %&gt;% group_by(alcalde_coalicion) %&gt;% summarize(porc_alcaldes_reelectos = sum(alcalde_reelecto) / n()), mapping = aes(x = porc_alcaldes_reelectos, y = alcalde_coalicion)) + geom_col() ## `summarise()` ungrouping output (override with `.groups` argument) Un poco de personalización: etiquetas Volvamos a uno de los gráficos que hicimos antes: ggplot(data = df_municipios, mapping = aes(x = porc_mapuche, y = porc_pobres_md4, color = alcalde_coalicion, shape = alcalde_coalicion)) + geom_point(size = 2) Con el comando labs() dentro de la cadena de ggplot2 podemos poner etiquetas que harán al gráfico más legible: ggplot(data = df_municipios, mapping = aes(x = porc_mapuche, y = porc_pobres_md4, color = alcalde_coalicion, shape = alcalde_coalicion)) + geom_point(size = 2) + labs(title = &quot;Relación entre porcentaje de población mapuche y porcentaje de pobreza&quot;, subtitle = &quot;por comunas, año 2017&quot;, caption = &quot;Fuente: Casen (2017).&quot;, # ahora para los mapeos estéticos: x = &quot;% de población mapuche&quot;, y = &quot;% de población pobreza (multidimensional)&quot;, color = &quot;Coalición del(la) edil&quot;, shape = &quot;Coalición del(la) edil&quot;) (Ejercicios B-D) ¡En todos los ejercicios genera buenas etiquetas para tus gráficos, utilizando labs()! Genera un plot de violín para la relación entre una variable x discreta y una variable y continua en la base. Tu código: Genera un gráfico de dispersión entre dos variables continuas de la base. Cambia el color y/o forma de los puntos de acuerdo a una de las variables categóricas de la base (si es que vas a utilizar una variable dummy para esto, ingrésala como as.factor(variable) en el mapeo estético). Ayudándote del torpedo para hoy, genera dos gráficos que incluya geoms que no hayamos visto hasta ahora. d1. Tu código: d2. Tu código: "],
["visualizacion-ext.html", "03B - Visualización de datos (extensiones) Cargar paquetes y datos Gráfico de ránking Facetas Gráficos de líneas Más personalización", " 03B - Visualización de datos (extensiones) Si quieres correr este script localmente, debe haber descargado el proyecto, como se explica al comienzo del script 3A. Como al principio de todo script, recomiendo reiniciar R. Esto lo conseguimos con Session &gt; Restart R y clickeando en la escoba del panel de “Environment” (superior derecho). Cargar paquetes y datos library(tidyverse) df_municipios &lt;- read_rds(&quot;datos/datos_municipios.rds&quot;) Gráfico de ránking Supongamos que queremos rankear a las comunas según su edad promedio. Podríamos hacer un gráfico de columnas: ggplot(data = df_municipios, mapping = aes(x = edad_prom, y = comuna)) + geom_col() (Al menos) dos cosas están mal con el gráfico anterior. Primero, son demasiadas observaciones. Segundo, las barras no están ordenadas. Podemos suplir ambas cosas y crear un gráfico de “ránking” que se entienda: ggplot(data = df_municipios %&gt;% arrange(-edad_prom) %&gt;% # ordenamos slice(1:10), # seleccionamos las diez primeras mapping = aes(x = edad_prom, y = fct_reorder(comuna, edad_prom))) + # ordenamos geom_col() Ejercicio A Genera un gráfico de ránking para las diez comunas con mayor población de la muestra. Facetas ggplot(data = df_municipios, mapping = aes(x = porc_pobres_md4)) + geom_histogram() ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. ggplot(data = df_municipios, mapping = aes(x = porc_pobres_md4)) + geom_histogram() + facet_wrap(~alcalde_coalicion) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. ggplot(data = df_municipios, mapping = aes(x = porc_pobres_md4)) + geom_histogram() + facet_wrap(~alcalde_coalicion, nrow = 3) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. Noten que los gráficos anteriores, por defecto, las facetas comparten escalas para las variables x e y. Podemos cambiar este default con el argumento scales = \"free\", que también puede tomar los valores “free_x” o “free_y”. Qué queremos usar aquí dependerá de la naturaleza de nuestros datos, caso a caso… ggplot(data = df_municipios, mapping = aes(x = porc_pobres_md4)) + geom_histogram() + facet_wrap(~alcalde_coalicion, scales = &quot;free&quot;) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. Ejercicio B Genera un gráfico de dispersión (con geom_point()) para dos variables de la base. Luego divídelo por facetas según la coalición del(la) edil. Gráficos de líneas Vamos a cargar datos desde Gapminder (2010), compilados por Edgar Ruiz, Riva Quiroga y Mauricio ‘Pacha’ Vargas: gapminder_muestra &lt;- read_csv(&quot;datos/gapminder_muestra_es.csv&quot;) ## Parsed with column specification: ## cols( ## pais = col_character(), ## anio = col_double(), ## esperanza_de_vida = col_double() ## ) Podríamos querer graficar las tendencias en el tiempo para los tres países. Con las herramientas que hemos visto ahora ahora, podríamos hacer algo como lo siguiente: ggplot(data = gapminder_muestra, mapping = aes(x = anio, y = esperanza_de_vida, color = pais)) + geom_point() Esto es difícil de leer, nos vendría bien tener líneas para seguir los patrones en el tiempo. Podemos hacer esto añadiendo geom_line() y el mapeo estético group = (a veces podemos omitir esto, ggplot2 tratará de inferirlo, pero yo recomiendo utilizarlo explícitamente siempre). ggplot(data = gapminder_muestra, mapping = aes(x = anio, y = esperanza_de_vida, color = pais, group = pais)) + geom_point() + geom_line() Más personalización Vamos a ver cómo añadir texto dentro de los gráficos, editar las escalas (ejes y colores), etcétera, el próximo script. "],
["visualizacion-personalizacion.html", "03C - Visualización de datos (personalización) Inicio: cargar paquetes, base de datos Gráfico de ejemplo Gráficos como objetos / guardar gráficos en el disco Personalización de gráficos", " 03C - Visualización de datos (personalización) Si quieres correr este script localmente, debe haber descargado el proyecto, como se explica al comienzo del script 3A. Como al principio de todo script, recomiendo reiniciar R. Esto lo conseguimos con Session &gt; Restart R y clickeando en la escoba del panel de “Environment” (superior derecho). Inicio: cargar paquetes, base de datos library(tidyverse) Cargar de datos: municipios Carguemos nuestra base de datos en formato .rds. Tiene información comunal construida a partir de dos fuentes: la encuesta Casen 2017 y los resultados de las elecciones municipales del año 2016. df_municipios &lt;- read_rds(&quot;datos/datos_municipios.rds&quot;) Gráfico de ejemplo ggplot(data = df_municipios, mapping = aes(x = as.factor(region), y = porc_pobres_md4)) + geom_boxplot() + labs(x = &quot;Región&quot;, y = &quot;% Pobreza multidimensional&quot;, title = &quot;% de pobreza en las comunas de Chile, separadas por región&quot;, caption = &quot;Fuente: Casen (2017)&quot;) Gráficos como objetos / guardar gráficos en el disco Podemos crear los gráficos como objetos en R. Hagamos esto para nuestro gráfico anterior: p_pobreza_sep_region &lt;- ggplot(data = df_municipios, mapping = aes(x = as.factor(region), y = porc_pobres_md4)) + geom_boxplot() + labs(x = &quot;Región&quot;, y = &quot;% Pobreza multidimensional&quot;, title = &quot;% de pobreza en las comunas de Chile, separadas por región&quot;, caption = &quot;Fuente: Casen (2017)&quot;) Para generarlos, los llamamos en la consola: p_pobreza_sep_region Podemos continuar con cadenas de ggplot2 a partir de objetos: p_pobreza_sep_region + geom_violin(alpha = 0.5) También podemos guardar nuestros gráficos en el disco fácilmente, si es que son objetos: ggsave(filename = &quot;p_pobreza_sep_region.png&quot;, plot = p_pobreza_sep_region) ## Saving 7 x 5 in image ¿Cómo conseguir que el gráfico tenga las proporciones que queremos? La mejor forma es modificando un poco algunos argumento de ggsave: scale edita la proporción de tamaños entre el plano y los elementos del gráfico. Valores menores a 1 harán los elementos más grandes. width edita el ancho, en pulgadas. height edita el alto, en pulgadas. Con units = \"cm\" podríamos dar ancho y alto en centímetros. [Aquí hay una guía completa sobre guardar gráficos en disco, escrita por Jenny Bryan (2018)] Casi siempre me funciona bien ocupar scale = 0.8, height = 6 y width = entre 8 y 10 (dependiendo si es un gráfico ancho o no). Hay mucho de ensayo y error aquí! ggsave(filename = &quot;p_pobreza_sep_region.png&quot;, plot = p_pobreza_sep_region, scale = 0.8, height = 6, width = 10) Personalización de gráficos Etiquetas (labs) Esto es algo que ya hemos visto, y se consigue con el comando labs(): ggplot(data = df_municipios, mapping = aes(x = alcalde_coalicion)) + geom_bar() + labs(x = &quot;Coalición del alcalde&quot;, y = &quot;Frecuencia&quot;, title = &quot;Alcaldías por coalición, luego de las elecciones 2016&quot;, caption = &quot;Fuente: Emol (2016)&quot;) Algunos argumentos de labs() funcionan en cualquier gráfico (title, subtitle, caption, etc.), mientras otros dependen de los mapeos estéticos particulares de cada gráfico (x, y, color, shape, etc.). Personalizar escalas numéricas Volvamos a nuestro histograma de antes: ggplot(data = df_municipios, mapping = aes(x = porc_rural)) + geom_histogram(binwidth = 5, boundary = 0, closed = &quot;left&quot;) + labs(x = &quot;% de población rural&quot;, y = &quot;Frecuencia&quot;, title = &quot;Comunas chilenas según su porcentaje de población rural&quot;, caption = &quot;Fuente: Casen (2017)&quot;) Podemos editar arbitrariamente qué se muestra en los ejes continuos con los comandos scale_*_continuous() y el argumento breaks =: ggplot(data = df_municipios, mapping = aes(x = porc_rural)) + geom_histogram(binwidth = 5, boundary = 0, closed = &quot;left&quot;) + labs(x = &quot;% de población rural&quot;, y = &quot;Frecuencia&quot;, title = &quot;Comunas chilenas según su porcentaje de población rural&quot;, caption = &quot;Fuente: Casen (2017)&quot;) + scale_x_continuous(breaks = seq(from = 0, to = 100, by = 10)) + scale_y_continuous(breaks = seq(from = 0, to = 60, by = 10)) (Ejercicio A) A continuación crearemos la pequeña base de datos utilizada para hacer el gráfico mostrado antes por Sebastián Piñera. Utilizando dicha base, genera el gráfico correcto en ggplot2. Este es un caso donde no hay necesidad de editar la escala por defecto. Recuerda utilizar etiquetas (labs) que ayuden a leer mejor el gráfico. df_victimizacion &lt;- tibble( anio = c(2010, 2013, 2016), porc_victimizacion = c(30.7, 22.8, 27.3) ) df_victimizacion ## # A tibble: 3 x 2 ## anio porc_victimizacion ## &lt;dbl&gt; &lt;dbl&gt; ## 1 2010 30.7 ## 2 2013 22.8 ## 3 2016 27.3 Tu código: (Nueva base de datos) Ahora trabajaremos con una base de datos con información de carreras universitarias en Estados Unidos. Su fuente es FiveThirtyEight (2018), aunque estos datos específicos fueron editados para Tidy Tuesday. carreras_eeuu &lt;- read_csv(&quot;datos/carreras_eeuu.csv&quot;) ## Parsed with column specification: ## cols( ## carrera_codigo = col_double(), ## carrera = col_character(), ## carrera_tipo1 = col_character(), ## carrera_tipo2 = col_character(), ## estudiantes_total = col_double(), ## estudiantes_muj = col_double(), ## estudiantes_hom = col_double(), ## salario_mediana = col_double(), ## salario_q1 = col_double(), ## salario_q3 = col_double(), ## en_part_time = col_double(), ## en_trabajos_calificados = col_double(), ## en_trabajos_no_calificados = col_double(), ## en_trabajos_sueldo_min = col_double(), ## desempleados = col_double() ## ) glimpse(carreras_eeuu) ## Rows: 171 ## Columns: 15 ## $ carrera_codigo &lt;dbl&gt; 1100, 1101, 1102, 1103, 1105, 1106, 1199, 1301, 1302, 1303, 1401, 1501, 1901, 1902, 1903, 1904, 2001, 2100, 2101, 2102, 2105, 2106, 2107, 2201, 2300, 2301, 2303, 2304, 2305, 2306, 2307, 2308, 2309, 2310, 2311, 23… ## $ carrera &lt;chr&gt; &quot;Agricultura (General)&quot;, &quot;Producción y Manejo Agrícola&quot;, &quot;Economía Agrícola&quot;, &quot;Ciencias Animales&quot;, &quot;Agronomía&quot;, &quot;Ciencias del Suelo&quot;, &quot;Agricultura (Misceláneo)&quot;, &quot;Ciencias Ambientales&quot;, &quot;Ciencias Forestales&quot;, &quot;Ge… ## $ carrera_tipo1 &lt;chr&gt; &quot;STEM&quot;, &quot;STEM&quot;, &quot;STEM&quot;, &quot;STEM&quot;, &quot;STEM&quot;, &quot;STEM&quot;, &quot;STEM&quot;, &quot;STEM&quot;, &quot;STEM&quot;, &quot;STEM&quot;, &quot;STEM&quot;, &quot;Humanidades y Ciencias Sociales&quot;, &quot;Humanidades y Ciencias Sociales&quot;, &quot;Humanidades y Ciencias Sociales&quot;, &quot;Humanidades y Cien… ## $ carrera_tipo2 &lt;chr&gt; &quot;Agricultura y Recursos Naturales&quot;, &quot;Agricultura y Recursos Naturales&quot;, &quot;Agricultura y Recursos Naturales&quot;, &quot;Agricultura y Recursos Naturales&quot;, &quot;Agricultura y Recursos Naturales&quot;, &quot;Agricultura y Recursos Naturale… ## $ estudiantes_total &lt;dbl&gt; 10399, 14240, 2439, 21573, 7416, 685, 1488, 25965, 3607, 13773, 46420, 31195, 213996, 72619, 52824, 53162, 18035, 36698, 4168, 128319, 11913, 8066, 7613, 10510, 143718, 804, 818, 170862, 14237, 28213, 37589, 6483… ## $ estudiantes_muj &lt;dbl&gt; 6053, 9658, 1749, 5347, 4897, 476, 404, 10787, 3156, 8617, 25463, 8739, 70619, 23736, 24704, 12862, 11431, 27392, 3046, 99743, 9005, 6607, 5291, 4364, 26893, 280, 119, 13029, 3872, 15670, 1167, 2049, 6820, 2682, … ## $ estudiantes_hom &lt;dbl&gt; 4346, 4582, 690, 16226, 2519, 209, 1084, 15178, 451, 5156, 20957, 22456, 143377, 48883, 28120, 40300, 6604, 9306, 1122, 28576, 2908, 1459, 2322, 6146, 116825, 524, 699, 157833, 10365, 12543, 36422, 4434, 10305, 2… ## $ salario_mediana &lt;dbl&gt; 40000, 40000, 40000, 30000, 32000, 35000, 29000, 35600, 35000, 35000, 40000, 35000, 35000, 35000, 33000, 35000, 35000, 45000, 41300, 53000, 45000, 37500, 36400, 29000, 34000, 34000, 41000, 32000, 34000, 31000, 28… ## $ salario_q1 &lt;dbl&gt; 30000, 25000, 27000, 22000, 22900, 18500, 23000, 25000, 28600, 25000, 31000, 24500, 27000, 26000, 25000, 27000, 25000, 30000, 20000, 39000, 32500, 25000, 27000, 20000, 26000, 29000, 41000, 23400, 30000, 24000, 21… ## $ salario_q3 &lt;dbl&gt; 50000, 50000, 54000, 40000, 40000, 44000, 42100, 40200, 48000, 42000, 50000, 44000, 45000, 42900, 45000, 47000, 45000, 60000, 46000, 70000, 58000, 50000, 49000, 36000, 41000, 35000, 43000, 38000, 40000, 40000, 35… ## $ en_part_time &lt;dbl&gt; 2031, 2196, 620, 5353, 1246, 185, 335, 7071, 891, 2613, 10206, 9541, 49889, 15902, 13078, 10948, 4690, 4332, 482, 18726, 1468, 1030, 1447, 2064, 29558, 0, 135, 37965, 2273, 7230, 7001, 1227, 3782, 5153, 5168, 221… ## $ en_trabajos_calificados &lt;dbl&gt; 2418, 1925, 535, 5443, 2089, 355, 483, 8149, 1096, 4333, 16178, 8465, 40763, 23279, 12855, 9659, 4545, 13344, 2024, 68622, 4390, 2354, 2593, 563, 82007, 346, 509, 108085, 10699, 12777, 23515, 4214, 10304, 20185, … ## $ en_trabajos_no_calificados &lt;dbl&gt; 4717, 6221, 893, 9571, 3545, 144, 626, 10076, 1692, 5808, 13724, 11818, 97964, 26672, 25297, 23059, 8794, 11783, 1033, 25667, 4102, 3244, 2941, 7384, 31112, 206, 221, 36972, 1977, 9328, 7705, 1106, 3967, 3797, 55… ## $ en_trabajos_sueldo_min &lt;dbl&gt; 839, 1362, 94, 2125, 1231, 0, 31, 3175, 327, 1405, 4221, 3677, 27440, 8512, 6429, 7214, 2495, 1672, 263, 5144, 608, 308, 352, 3163, 11443, 111, 0, 11502, 786, 2042, 2868, 591, 1385, 1179, 1806, 722, 2819, 2767, 6… ## $ desempleados &lt;dbl&gt; 178, 649, 182, 917, 314, 0, 82, 1779, 322, 842, 4366, 1668, 14602, 4535, 4410, 3305, 2006, 2934, 419, 6884, 639, 721, 1100, 510, 7195, 0, 88, 7297, 216, 1920, 1360, 266, 833, 1067, 1012, 496, 1379, 1206, 547, 285… (Ejercicio B) Antes de comenzar a trabajar con los datos, crea una nueva base de datos llamada “carreras_eeuu2” que tenga tres nuevas variables: porc_mujeres, porc_desempleo, porc_en_trabajos_calificados (todas calculadas con respecto al total de cada carrera). Tu código: En el resto de la clase utilizaremos esta base modificada. Elegir buenas escalas de colores Escalas de colores categóricas Comencemos dibujando solo el plano de coordenadas, sin geoms. ¿Qué esperan ver en el siguiente gráfico, una vez que añadamos geom_point()? ggplot(data = carreras_eeuu2, mapping = aes(x = porc_desempleo, y = porc_en_trabajos_calificados, color = carrera_tipo1)) Veamos el gráfico: ggplot(data = carreras_eeuu2, mapping = aes(x = porc_desempleo, y = porc_en_trabajos_calificados, color = carrera_tipo1)) + geom_point() La paleta de colores categóricos por defecto de ggplot2, lamentablemente, es difícil de ver para los/as daltónicos/as. Podemos cambiarla por una de ColorBrewer con el comando scale_color_brewer(): ggplot(data = carreras_eeuu2, mapping = aes(x = porc_desempleo, y = porc_en_trabajos_calificados, color = carrera_tipo1)) + geom_point() + scale_color_brewer(palette = &quot;PuOr&quot;) Escalas de colores numéricas Grafiquemos la misma relación de antes, pero esta vez añadamos color a los puntos con una variable continua (porc_mujeres): ggplot(data = carreras_eeuu2, mapping = aes(x = porc_desempleo, y = porc_en_trabajos_calificados, color = porc_mujeres)) + geom_point() De nuevo, la paleta de colores por defecto es subóptima. La mejor paleta para visualizar escalas continuas en color es “viridis”. Podemos utilizarla con el comando scale_color_viridis_c(): ggplot(data = carreras_eeuu2, mapping = aes(x = porc_desempleo, y = porc_en_trabajos_calificados, color = porc_mujeres)) + geom_point() + scale_color_viridis_c() # de la escala (Ejercicio C) Genera un gráfico de dispersión para dos variables numéricas en la base de datos. Añade color a las observaciones de acuerdo al tipo de carrera (amplio). Utiliza una escala de ColorBrewer distinta a la de antes. Recuerda utilizar buenos labs (etiquetas). Tu código: Texto dentro del gráfico Para el último gráfico que hicimos, nos puede interesar ver la posición de carreras específicas. Podemos generar esto añadiendo texto dentro del gráfico: ggplot(data = carreras_eeuu2, mapping = aes(x = porc_desempleo, y = porc_en_trabajos_calificados, color = porc_mujeres, label = carrera)) + geom_point() + geom_label() + # esto genera los textos, ojo que necesita el mapeo de &quot;label&quot; antes! scale_color_viridis_c() Esto último es inútil, pues no se entiende nada. Podemos destacar solo una carrera si construimos geom_label() usando datos parciales. Coloquemos solo el texto para ciencia política: ggplot(data = carreras_eeuu2, mapping = aes(x = porc_desempleo, y = porc_en_trabajos_calificados, color = porc_mujeres, label = carrera)) + geom_point() + geom_label(data = carreras_eeuu2 %&gt;% filter(carrera == &quot;Ciencia Política&quot;), alpha = 0.7) + scale_color_viridis_c() ¿Cómo ponemos múltiples textos con claridad en un gráfico? Aquí nos será muy útil el paquete ggrepel: #install.packages(&quot;ggrepel&quot;) library(ggrepel) ggplot(data = carreras_eeuu2, mapping = aes(x = porc_desempleo, y = porc_en_trabajos_calificados, color = porc_mujeres, label = carrera)) + geom_point() + # usamos ahora geom_label_repel() geom_label_repel(data = carreras_eeuu2 %&gt;% filter(carrera == &quot;Ciencia Política&quot;), alpha = 0.7, # lo siguiente obliga a ggrepel a dibujar las líneas de guía: min.segment.length = 0) + scale_color_viridis_c() No parece que haya hecho demasiado. ggrepel es particularmente útil para visualizar varios textos dentro de un gráfico. Por ejemplo, ahora veamos todas las carreras de comunicaciones: ggplot(data = carreras_eeuu2, mapping = aes(x = porc_desempleo, y = porc_en_trabajos_calificados, color = porc_mujeres, label = carrera)) + geom_point() + geom_label_repel(data = carreras_eeuu2 %&gt;% filter(carrera_tipo2 == &quot;Comunicaciones&quot;), min.segment.length = 0, alpha = 0.7, size = 4) + scale_color_viridis_c() Texto dentro de gráficos de columna Calculemos la mediana de porcentaje de desempleo por tipo (amplio) de carrera: ggplot(data = carreras_eeuu2 %&gt;% group_by(carrera_tipo1) %&gt;% summarize(median_porc_desempleo = median(porc_desempleo)), mapping = aes(x = carrera_tipo1, y = median_porc_desempleo)) + geom_col() ## `summarise()` ungrouping output (override with `.groups` argument) Para añadir cajas de texto con los valores numéricos al gráfico, de nuevo podemos utilizar geom_label(), luego de haber indicado el mapeo estético para “label”: ggplot(data = carreras_eeuu2 %&gt;% group_by(carrera_tipo1) %&gt;% summarize(median_porc_desempleo = median(porc_desempleo)), mapping = aes(x = carrera_tipo1, y = median_porc_desempleo, label = median_porc_desempleo)) + geom_col() + geom_label() ## `summarise()` ungrouping output (override with `.groups` argument) Un tip: podemos redondear los números utilizando round() en el mapeo de label: ggplot(data = carreras_eeuu2 %&gt;% group_by(carrera_tipo1) %&gt;% summarize(median_porc_desempleo = median(porc_desempleo)), mapping = aes(x = carrera_tipo1, y = median_porc_desempleo, label = round(median_porc_desempleo, 2))) + geom_col() + geom_label() ## `summarise()` ungrouping output (override with `.groups` argument) Por cierto, aparte de geom_label() está geom_text(), que no dibuja una caja alrededor del texto. ggplot(data = carreras_eeuu2 %&gt;% group_by(carrera_tipo1) %&gt;% summarize(mediana_porc_desempleo = median(porc_desempleo)), mapping = aes(x = carrera_tipo1, y = mediana_porc_desempleo, label = round(mediana_porc_desempleo, 2))) + geom_col() + geom_text(vjust = -0.4) # solo esto cambió. vjust cambia ligeramente la posición del texto ## `summarise()` ungrouping output (override with `.groups` argument) (Ejercicio D) Genera un gráfico de tipo “ránking” con la diez carreras con mayor salario mediano. Registra con texto los valores de salarios medianos. ¡Utiliza buenos labs (etiquetas)! "],
["busqueda-ayuda.html", "04 - Guía búsqueda de ayuda Leer archivos de ayuda de R Encontrar funciones en línea Solucionar problemas Pedir ayuda con ejemplos reproducibles (reprex)", " 04 - Guía búsqueda de ayuda En esta guía vamos a revisar algunos tips y recursos para buscar ayuda efectivamente, en el contexto de proyectos de análisis de datos. Leer archivos de ayuda de R Todas las funciones en R tienen un archivo de ayuda asociado. Podemos acceder a estos simplemente antecediendo el nombre de la función con un signo de interrogación: ?mean ?`%&gt;%` # con estos tildes invertidos podemos ingresar funciones que tengan caracteres especiales ?`%in%` Podemos leer un archivo de ayuda de R de la siguiente forma: Figure 1: Traducido de Healy (2018). Encontrar funciones en línea CRAN packages CRAN es el sitio de los repositorios oficiales de R. La página web es un poco confusa, pero usualmente encontramos los paquetes que queremos buscando en Google cran &lt;paquete&gt;. Por ejemplo, este es el sitio para el paquete dplyr. Contiene información útil sobre el paquete. Tres campos muy importantes a mirar son (a) “URL”, que nos lleva al sitio oficial del paquete, usualmente en la página del autor/a, (B) “Vignettes”, que son pequeñas guías oficiales de cómo usarlo y (C) “Reference manual”, un manual con todos los archivos de ayuda de sus funciones. rdocumentation.org En este sitio podemos buscar funciones y mirar sus archivos de ayuda en línea. Prueba a buscar alguna función conocida (por ejemplo, mutate, arrange, select, etc.). En la columna de la derecha aparecerán las funciones, mientras que la de la izquierda mostrará paquetes relacionados con nuestra búsqueda. CRAN Task Views CRAN Task Views son guías muy completas sobre qué paquetes nos pueden ayudar a lidiar con tópicos específicos. Por ejemplo, veamos el CTV de “Estadística para las Ciencias Sociales”. Solucionar problemas Problemas con paréntesis y comas Vamos a usar una base de ejemplo de ggplot2, llamada midwest. Contiene información demográfica sobre distintos condados en Estados Unidos, parte de la zona geográfica llamada “Midwest”. midwest ## # A tibble: 437 x 28 ## PID county state area poptotal popdensity popwhite popblack popamerindian popasian popother percwhite percblack percamerindan percasian percother popadults perchsd percollege percprof poppovertyknown percpovertyknown percbelowpoverty ## &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 561 ADAMS IL 0.052 66090 1271. 63917 1702 98 249 124 96.7 2.58 0.148 0.377 0.188 43298 75.1 19.6 4.36 63628 96.3 13.2 ## 2 562 ALEXA… IL 0.014 10626 759 7054 3496 19 48 9 66.4 32.9 0.179 0.452 0.0847 6724 59.7 11.2 2.87 10529 99.1 32.2 ## 3 563 BOND IL 0.022 14991 681. 14477 429 35 16 34 96.6 2.86 0.233 0.107 0.227 9669 69.3 17.0 4.49 14235 95.0 12.1 ## 4 564 BOONE IL 0.017 30806 1812. 29344 127 46 150 1139 95.3 0.412 0.149 0.487 3.70 19272 75.5 17.3 4.20 30337 98.5 7.21 ## 5 565 BROWN IL 0.018 5836 324. 5264 547 14 5 6 90.2 9.37 0.240 0.0857 0.103 3979 68.9 14.5 3.37 4815 82.5 13.5 ## 6 566 BUREAU IL 0.05 35688 714. 35157 50 65 195 221 98.5 0.140 0.182 0.546 0.619 23444 76.6 18.9 3.28 35107 98.4 10.4 ## 7 567 CALHO… IL 0.017 5322 313. 5298 1 8 15 0 99.5 0.0188 0.150 0.282 0 3583 62.8 11.9 3.21 5241 98.5 15.1 ## 8 568 CARRO… IL 0.027 16805 622. 16519 111 30 61 84 98.3 0.661 0.179 0.363 0.500 11323 76.0 16.2 3.06 16455 97.9 11.7 ## 9 569 CASS IL 0.024 13437 560. 13384 16 8 23 6 99.6 0.119 0.0595 0.171 0.0447 8825 72.3 14.1 3.21 13081 97.4 13.9 ## 10 570 CHAMP… IL 0.058 173025 2983. 146506 16559 331 8033 1596 84.7 9.57 0.191 4.64 0.922 95971 87.5 41.3 17.8 154934 89.5 15.6 ## # … with 427 more rows, and 5 more variables: percchildbelowpovert &lt;dbl&gt;, percadultpoverty &lt;dbl&gt;, percelderlypoverty &lt;dbl&gt;, inmetro &lt;int&gt;, category &lt;chr&gt; Generemos un gráfico con ella: ggplot(data = midwest, mapping = aes(x = as.factor(inmetro), y = percbelowpoverty)) + geom_boxplot() + labs(title = &quot;Relación entre carácter metropolitano y pobreza en los condados del Midwest&quot;, caption = &quot;Fuente: Wickham (2018)&quot;, x = &quot;Carácter metropolitano&quot;, y = &quot;Porcentaje de pobreza&quot;) La gran mayoría de los errores que se cometen en R tienen que ver con sintaxis. Como hemos visto, R (como cualquier lenguaje de programación) espera instrucciones muy precisas de nuestra parte. Aquí algunos tips para detectar problemas de este tipo: Revisar dónde abren/cierran paréntesis sospechosos. Si ponemos el teclado al lado de uno de ellos, RStudio resaltará el paréntesis par a este: Con respecto a las comas, debemos recordar que se utilizan para separar argumentos de funciones, por lo que siempre deben estar adentro de ellas. Fíjate en los argumentos de la función labs() en el código de arriba. Otro error de sintaxis es dejar cadenas de código (%&gt;% o +) abiertas. Esto es, dejar un pipe o “+” extra al final. R seguirá esperando la continuación de la cadena! Un truco para ver dónde está fallando nuestro código es “ponerle sangría” línea a línea. Si tenemos un código desordenado, podemos ir ordenándolo línea a línea con Ctrl + I. Probablemente esto nos dé una mejor perspectiva para encontrar errores de comas, pipes, etc: Leer los mensajes de error de R Veamos el siguiente error, cuando intentamos filtrar solo los condados de Illinois en la base de ejemplo: midwest %&gt;% filter(state = &quot;IL&quot;) ## Error: Problem with `filter()` input `..1`. ## x Input `..1` is named. ## ℹ This usually means that you&#39;ve used `=` instead of `==`. ## ℹ Did you mean `state == &quot;IL&quot;`? ¿Cuál es la solución al problema? En este caso el mensaje de error es muy claro, teníamos que usar el operador lógico ==, en vez de solo =. Buscar en internet La mayoría de la veces, los errores que devuelve R son difíciles de entender, a diferencia del ejemplo anterior. Una buena idea es buscar el error en Google (la mayoría de los errores ya han sido preguntados en línea), acompañado de la función y/o paquete. Para hacer estas búsquedas eficientemente, deberíamos eliminar cualquier información del error que sea específica de nuestra base de datos (“generalizándolo”). Por ejemplo, una buena búsqueda para el error anterior podría ser la siguiente. También eliminamos símbolos especiales (como ==), que seguramente Google no tomará en cuenta. r dplyr filter must not be named, do you need En Google podemos poner una palabra o frase entre comillas para que los resultados deban necesariamente contenerla tal como está escrita. Podríamos buscar algo como esto: r dplyr filter “must not be named, do you need” Por lejos, los mejores resultados vienen de StackOverflow, un sitio web de preguntas y respuestas de programación. En Google a menudo querrán clickear en “Más resultados de stackoverflow.com”, si es que no encuentran la solución en los primeros resultados. Podemos hacer nuestra búsqueda anterior directamente en StackOverflow a través de Google, de la siguiente forma: site:stackoverflow.com dplyr filter “must not be named, do you need” Pedir ayuda con ejemplos reproducibles (reprex) Cuando tenemos un problema y queremos compartirlo con alguien (colegas, StackOverflow, etc.), lo ideal es que generemos un ejemplo mínimo que reproduzca nuestro problema (reprex). La idea es que la otra persona no tenga que lidiar con todo nuestro código, sino que solo con la parte que nos está dando problemas. Adicionalmente, no queremos que esa otra persona tenga que entender nuestra base de datos en particular, por lo que los reprex usualmente están hechos con bases de datos pequeñas creadas o con bases de datos que vienen por defecto con R o el tidyverse (mtcars, midwest, mpg, diamonds, etc.). Por último, queremos que esa otra persona pueda correr rápidamente nuestro código, sin tener que preocuparse de nada más aparte de nuestro problema. Nuestro problema de antes: midwest %&gt;% filter(state = &quot;IL&quot;) ## Error: Problem with `filter()` input `..1`. ## x Input `..1` is named. ## ℹ This usually means that you&#39;ve used `=` instead of `==`. ## ℹ Did you mean `state == &quot;IL&quot;`? Utilizar la base “midwest” está bien, pero vamos a generar nuestro reprex con otra de ejemplo en el paquete ggplot2, llamada mpg. Esta base se ve de la siguiente forma. No importa mucho su contenido, pero sí que tenemos variables categóricas por las que querríamos filtrar, como por ejemplo “model”. ## # A tibble: 234 x 11 ## manufacturer model displ year cyl trans drv cty hwy fl class ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; ## 1 audi a4 1.8 1999 4 auto(l5) f 18 29 p compact ## 2 audi a4 1.8 1999 4 manual(m5) f 21 29 p compact ## 3 audi a4 2 2008 4 manual(m6) f 20 31 p compact ## 4 audi a4 2 2008 4 auto(av) f 21 30 p compact ## 5 audi a4 2.8 1999 6 auto(l5) f 16 26 p compact ## 6 audi a4 2.8 1999 6 manual(m5) f 18 26 p compact ## 7 audi a4 3.1 2008 6 auto(av) f 18 27 p compact ## 8 audi a4 quattro 1.8 1999 4 manual(m5) 4 18 26 p compact ## 9 audi a4 quattro 1.8 1999 4 auto(l5) 4 16 25 p compact ## 10 audi a4 quattro 2 2008 4 manual(m6) 4 20 28 p compact ## # … with 224 more rows Debemos pensar hacer la misma operación con la nueva base, y que nos dé el mismo error. Además, el reprex debe incluir la carga de paquetes: library(tidyverse) # carga filter() y mpg mpg %&gt;% filter(model = &quot;a4&quot;) # Error: `model` (`model = &quot;a4&quot;`) must not be named, do you need `==`? "]
]
