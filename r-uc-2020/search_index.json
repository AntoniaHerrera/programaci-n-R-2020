[
["index.html", "Programación para las Ciencias Sociales Inicio Links importantes Cronograma y materiales del curso", " Programación para las Ciencias Sociales Andrés Cruz 2020-08-18 Inicio Este es el sitio web del curso “Programación para las Ciencias Sociales” (ICP0506), dictando en el Instituto de Ciencia Política UC durante el segundo semestre de 2020. El objetivo del sitio es servir como material de consulta. Todos los proyectos que ejecutemos en RStudio Cloud estarán también compilados aquí, para facilitar su revisión. Links importantes Programa del curso Clases grabadas (acceso con cuenta UC) RStudio Cloud (acceso con cuenta UC) Cronograma y materiales del curso I. Introducción J 2020-08-13 Presentación del programa Ciencia de datos y programación Introducción a R, RStudio y R Markdown Material mínimo Material complementario RStudio. 2018a. Introducción al Lenguaje R: Guía Rápida. RStudio. 2018b. RStudio IDE: Guía Rápida. RStudio. 2014. RMarkdown: Hoja de Referencia. II. Manejo de bases de datos J 2020-08-20, J 2020-08-27 Introducción al tidyverse Carga de bases de datos Manejo de bases de datos Limpieza de bases Material mínimo Material complementario Cruz, A. 2019. Manejo de Datos. RStudio. 2017. Importar Datos: Guía Rápida RStudio. 2018. Transformación de Datos con dplyr: Hoja de referencia. III. Visualización de datos J 2020-09-03, J 2020-09-10 Principios de visualización de datos Introducción a la gramática de gráficos Generación de gráficos en ggplot2 Material mínimo Material complementario Healy, K. 2018. Data Visualization: A Practical Introduction. Cap. 1. Araya, S. 2019. Visualización de Datos. RStudio. 2016. Visualización de Datos usando ggplot2: Guía Rápida. IV. Búsqueda efectiva de ayuda J 2020-09-10 Archivos de ayuda en R. Recursos de apoyo: Google, StackOverflow, GitHub. Construcción de ejemplos mínimos reproducibles (reprex). Material mínimo Material complementario Healy, K. 2018. Data Visualization: A Practical Introduction. Anexo 1.1 Wickham, H. y Grolemund, G. 2017. R for Data Science. Sección 1.6. Mostipak, J. 2018. So You’ve Been Asked to Make a Reprex. Entrega Tarea 1: W 2020-09-16 V. Manejo avanzado de bases de datos J 2020-10-01, J 2020-10-08 Reformulación (pivot) de bases de datos. Recodificación de variables. Combinación (merge) de bases. Material mínimo Material complementario Urdinez, F. y Cruz, A. 2020. Manejo Avanzado de Datos Políticos. RStudio. 2017b. Importar Datos: Guía Rápida. Pág. 2. Bryan, J. 2018. Cheatsheet for dplyr join functions. VI. Análisis de texto J 2020-10-15, J 2020-10-22 Manipulación de cadenas de texto. Expresiones regulares. Introducción al análisis cuantitativo de textos (QTA). Material mínimo Material complementario Wickham, H., y Grolemund, G. 2017. R for Data Science. Cap. 14. Silge, J. y Robinson, D. 2018. Text Mining with R. Caps. 1-3. RStudio. 2017c. Trabajar con Cadenas con stringr: Guía Rápida Entrega Tarea 2: W 2020-10-28 VII. R avanzado J 2020-10-29 Tipos de objeto en R Funciones personalizadas. Iteraciones Material mínimo Material complementario Wickham, H., y Grolemund, G. 2017. R for Data Science. Caps. 19 y 21. RStudio. 2017a. Aplicar Funciones con purrr: Guía Rápida. VIII. Minería de datos J 2020-11-05 Web scraping de sitios web Extracción de datos a partir de APIs. Material mínimo Material complementario Barría, G. 2020. Minería de Datos Web. IX. Datos espaciales y mapas J 2020-11-12 Introducción a datos espaciales con sf. Mapas en ggplot2. Material mínimo Material complementario Escobar, A. y Ortiz, G. 2020. Mapas y Datos Espaciales. Entrega Tarea 3: W 2020-11-18 X. Replicación y generación de reportes J 2020-11-19 Replicación en ciencias sociales. R Markdown para reportes y presentaciones. Material mínimo Material complementario King, G. 1995. Replication, Replication. RStudio. 2014. RMarkdown: Hoja de Referencia. Presentaciones y retroalimentación para el trabajo final: J 2020-11-26 Clase de cierre J 2020-12-03 La comunidad de R Material adicional RStudio de escritorio Material mínimo Material complementario Frick, H., y Daish, A. 2017. R-Ladies Global Community. Entrega del trabajo escrito final: J 2020-12-10 "],
["rbasico.html", "01 - R básico Introducción: comandos y código Paquetes Comandos básicos y tipos de objeto en R Sintaxis de R Markdown Siguiente script", " 01 - R básico Si quieres correr este script localmente, acá puedes descargar el proyecto comprimido en .zip. Paquetes que necesitas tener instalados antes de comenzar: tidyverse. Este es un script de R Markdown, una forma de registrar nuestro código de R. Sabemos esto por por la extensión .Rmd y todas las opciones que están fijadas más arriba (por ahora no nos concentraremos demasiado en ellas). Antes de comenzar, juguemos un poco con las opciones de RStudio. Vamos a Tools &gt; Global Options &gt; Appearance. Introducción: comandos y código En los scripts de R Markdown el texto plano (como este) nos permite añadir comentarios, explicaciones, etc. Cuando ocupemos código debemos insertarlo en “chunks” o bloques de código, como veremos a continuación. Haremos un bloque de código para ocupar R como una calculadora simple. Podemos correr el código línea por línea con Ctrl/Cmd + Enter, si nuestro teclado está en dicha parte del script. Para correr el chunk completo puedes presionar en el pequeño botón de “Play” en la parte superior derecha o presionar Ctrl/Cmd + Shift + Enter. 1 + 5 ## [1] 6 78878.12 * 8e05 / (12 - 7 + 87.2) # este es un comentario &quot;en línea&quot;, se antecede con un # ## [1] 684408850 Para crear un chunk, debes presionar Ctrl/Cmd + Alt + i. Prueba a crear un chunk y calcula alguna operación aritmética. Tu código: En R podemos crear objetos, que guardarán información para ser utilizada en operaciones siguientes: mi_objeto &lt;- 5 mi_objeto # poner su nombre lo imprime, sin más ## [1] 5 Por ejemplo, podemos hacer aritmética con este nuevo objeto: mi_objeto - 17 ## [1] -12 ¿Cuál es la diferencia entre este último comando y el siguiente? mi_objeto_b &lt;- mi_objeto - 17 Eliminemos este segundo objeto, utilizando la funcion rm() (remove): rm(mi_objeto_b) Si quisiéramos reiniciar la sesión (comenzando todo desde cero), podríamos presionar Session &gt; Restart R) y clickear en la escoba del panel “Environment” de RStudio (superior derecho). Paquetes Los paquetes añaden nuevas funciones a R. Hay que cargarlos en cada nueva sesión, con el comando library(). library(tidyverse) El tidyverse es un paquete que ocuparemos en todas nuestras clases, que añade una gran cantidad de funciones al lenguaje. Ojo! library() solo nos permite cargar paquetes que hayamos instalado. Aquí en RStudio Cloud yo instalé el tidyverse para todas/os, pero por defecto habría que instalarlo. Probemos a utilizar otro paquete, janitor: library(janitor) ## Error in library(janitor) : there is no package called &#39;janitor&#39; Debemos instalarlo. Basta con instalar los paquetes una vez, luego podremos cargarlos en cada sesión que queramos. La mayoría de los paquetes se instalan con el comando install.packages(\"paquete\"): install.packages(&quot;janitor&quot;) Por cierto, podemos saber que R está trabajando gracias a RStudio. Mientras el paquete se instala, fíjate que hay una pequeña línea (¿color?) en la parte izquierda del código. Terminada la instalación, carguemos el nuevo paquete: library(janitor) # ahora el paquete está instalado, por lo que carga sin problemas (Ejercicio A) Prueba a instalar un paquete llamado “fun”. Luego, cárgalo y corre el siguiente comando: random_password(). ¿Qué hace? Recuerda registrar todo el proceso en el script! Tu código: Comandos básicos y tipos de objeto en R En esta sección veremos vectores, data frames (marcos de datos) y listas. Vectores Lo siguiente es un vector numérico: c(7, 9, 19, 2, 9) ## [1] 7 9 19 2 9 El siguiente comando creará un objeto (mi_vector). ¿Qué contendrá este nuevo objeto? mi_vector &lt;- c(2, -3, mi_objeto, 6:9) Veamos algunos comandos básicos a aplicar en números y vectores numéricos. mi_vector[2] # acceder al segundo elemento del vector ## [1] -3 sqrt(x = mi_objeto) # la raíz cuadrada es una función! ## [1] 2.236068 log(x = mi_objeto) # logaritmo natural ## [1] 1.609438 mean(x = mi_vector) # media del vector ## [1] 4.857143 media_mi_vector &lt;- mean(x = mi_vector) # si quisiéramos guardarla como objeto! sd(x = mi_vector) # desviación estándar del vector ## [1] 4.140393 length(x = mi_vector) # número de elementos del vector ## [1] 7 sum(x = mi_vector) # suma del vector ## [1] 34 min(x = mi_vector) # ¿qué hace esta función? ## [1] -3 max(x = mi_vector) # ¿y esta? ## [1] 9 Todas las funciones que hemos visto simplemente tomaban un objeto, sin más. La mayoría de las funciones son más complejas: requieren más de un objeto o nos permiten integrar más opciones. Les damos instrucciones específicas a las funciones por medio de argumentos (hasta ahora, solo vimos funciones con el inicio de argumento “x =”). sort(x = mi_vector) # ordena el vector de menor a mayor ## [1] -3 2 5 6 7 8 9 sort(x = mi_vector, decreasing = TRUE) # ¿qué cambia con este argumento? ## [1] 9 8 7 6 5 2 -3 Nota que podemos añadir saltos de línea entre argumentos: sort(x = mi_vector, decreasing = TRUE) ## [1] 9 8 7 6 5 2 -3 Importante. Si ponemos los valores de los argumentos en orden, podemos evitar escribir los argumentos mismos: sort(mi_vector, TRUE) # igual resultado que nuestros comandos anteriores ## [1] 9 8 7 6 5 2 -3 Por cierto, podemos consultar el archivo de ayuda de una función fácilmente. Ahí encontraremos los distintos argumentos explicados: ?sort Los vectores también pueden ser de otros tipos: c(&quot;Manzana&quot;, &quot;Pera&quot;, &quot;Naranja&quot;, &quot;Damasco&quot;) # vector de caracteres. Nota las comillas! ## [1] &quot;Manzana&quot; &quot;Pera&quot; &quot;Naranja&quot; &quot;Damasco&quot; nchar(&quot;Manzana&quot;) # cuenta los caracteres de un elemento ## [1] 7 c(TRUE, FALSE, TRUE, TRUE) # vector lógico ## [1] TRUE FALSE TRUE TRUE c(T, F, T, T) ## [1] TRUE FALSE TRUE TRUE (Ejercicio B) De nuevo ocupa la función random_password() del paquete fun, pero esta vez con el argumento length = 10. Prueba con diferentes valores del argumento! Tu código: Data frames (marcos de datos) Los data frames son objetos centrales en R, sin duda los que más utilizaremos. Vamos a cargar uno simple: df_trump_scores &lt;- read_csv(&quot;datos/trump_scores_202003_cong116.csv&quot;) # esta función es del tidyverse! ## Parsed with column specification: ## cols( ## last_name = col_character(), ## state = col_character(), ## party = col_character(), ## trump_score = col_double(), ## trump_margin = col_double() ## ) El “Trump Score” es el porcentaje de votaciones en las que un senador/a ha estado alineado/a con Donald Trump. El “Trump Margin” es el margen que Trump obtuvo en el estado del senador/a en cuestión. Fuente: FiveThirtyEight (2020). Descargado el 11 de marzo de 2020. df_trump_scores # imprime un vistazo rápido ## # A tibble: 100 x 5 ## last_name state party trump_score trump_margin ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Alexander TN R 80 26.0 ## 2 Blunt MO R 84.8 18.6 ## 3 Brown OH D 14.7 8.13 ## 4 Burr NC R 90.3 3.66 ## 5 Baldwin WI D 14.7 0.764 ## 6 Boozman AR R 88.2 26.9 ## 7 Blackburn TN R 93.9 26.0 ## 8 Barrasso WY R 91.2 46.3 ## 9 Bennet CO D 15.4 -4.91 ## 10 Blumenthal CT D 11.8 -13.6 ## # … with 90 more rows head(df_trump_scores) # imprime solo las seis primeras filas ## # A tibble: 6 x 5 ## last_name state party trump_score trump_margin ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Alexander TN R 80 26.0 ## 2 Blunt MO R 84.8 18.6 ## 3 Brown OH D 14.7 8.13 ## 4 Burr NC R 90.3 3.66 ## 5 Baldwin WI D 14.7 0.764 ## 6 Boozman AR R 88.2 26.9 También podemos inspeccionar un data frame clickeando su nombre en el panel superior derecho, pestaña Environment. Las columnas de un data frame son vectores! df_trump_scores$last_name ## [1] &quot;Alexander&quot; &quot;Blunt&quot; &quot;Brown&quot; &quot;Burr&quot; &quot;Baldwin&quot; &quot;Boozman&quot; &quot;Blackburn&quot; &quot;Barrasso&quot; &quot;Bennet&quot; &quot;Blumenthal&quot; &quot;Booker&quot; &quot;Braun&quot; &quot;Cantwell&quot; &quot;Cardin&quot; &quot;Carper&quot; &quot;Crapo&quot; ## [17] &quot;Collins&quot; &quot;Capito&quot; &quot;Cornyn&quot; &quot;Casey&quot; &quot;Cassidy&quot; &quot;Coons&quot; &quot;Cotton&quot; &quot;Cramer&quot; &quot;Cruz&quot; &quot;Cortez Masto&quot; &quot;Durbin&quot; &quot;Daines&quot; &quot;Duckworth&quot; &quot;Enzi&quot; &quot;Ernst&quot; &quot;Feinstein&quot; ## [33] &quot;Fischer&quot; &quot;Graham&quot; &quot;Grassley&quot; &quot;Gillibrand&quot; &quot;Gardner&quot; &quot;Hirono&quot; &quot;Heinrich&quot; &quot;Hoeven&quot; &quot;Harris&quot; &quot;Hassan&quot; &quot;Hyde-Smith&quot; &quot;Hawley&quot; &quot;Inhofe&quot; &quot;Johnson&quot; &quot;Jones&quot; &quot;Klobuchar&quot; ## [49] &quot;King&quot; &quot;Kaine&quot; &quot;Kennedy&quot; &quot;Leahy&quot; &quot;Lankford&quot; &quot;Lee&quot; &quot;Loeffler&quot; &quot;Markey&quot; &quot;McConnell&quot; &quot;Menendez&quot; &quot;Moran&quot; &quot;Murray&quot; &quot;Murkowski&quot; &quot;Murphy&quot; &quot;Merkley&quot; &quot;Manchin&quot; ## [65] &quot;McSally&quot; &quot;Portman&quot; &quot;Peters&quot; &quot;Paul&quot; &quot;Perdue&quot; &quot;Reed&quot; &quot;Roberts&quot; &quot;Risch&quot; &quot;Rubio&quot; &quot;Rounds&quot; &quot;Rosen&quot; &quot;Romney&quot; &quot;Sanders&quot; &quot;Schumer&quot; &quot;Shelby&quot; &quot;Stabenow&quot; ## [81] &quot;Shaheen&quot; &quot;Scott&quot; &quot;Sinema&quot; &quot;Schatz&quot; &quot;Sasse&quot; &quot;Sullivan&quot; &quot;Smith&quot; &quot;Scott&quot; &quot;Thune&quot; &quot;Toomey&quot; &quot;Tester&quot; &quot;Tillis&quot; &quot;Udall&quot; &quot;Van Hollen&quot; &quot;Wicker&quot; &quot;Wyden&quot; ## [97] &quot;Whitehouse&quot; &quot;Warner&quot; &quot;Warren&quot; &quot;Young&quot; df_trump_scores$trump_score ## [1] 80.000000 84.848485 14.705882 90.322581 14.705882 88.235294 93.939394 91.176471 15.384615 11.764706 4.166667 94.117647 15.151515 15.151515 11.764706 93.548387 41.176471 93.939394 91.176471 20.588235 84.848485 14.705882 ## [23] 82.352941 90.909091 93.750000 11.764706 18.181818 79.411765 16.129032 90.909091 91.176471 14.705882 88.235294 76.666667 91.176471 7.692308 83.870968 14.705882 20.588235 91.176471 4.545455 14.705882 91.176471 85.294118 ## [45] 90.909091 91.176471 21.212121 7.692308 17.647059 14.705882 88.235294 14.705882 88.235294 63.636364 100.000000 8.823529 91.176471 11.764706 57.575758 14.705882 56.250000 17.647059 11.764706 32.352941 91.176471 84.848485 ## [67] 14.705882 60.714286 92.857143 8.823529 91.176471 90.625000 81.250000 92.857143 12.500000 79.411765 5.263158 11.764706 91.176471 14.705882 14.705882 87.500000 24.242424 11.764706 87.500000 90.322581 17.647059 91.176471 ## [89] 91.176471 84.375000 11.764706 88.235294 17.647059 14.705882 85.294118 8.823529 9.375000 14.705882 9.090909 64.705882 Producto de esto, podemos operar en ellas usando las funciones que aprendimos antes. (Ejercicio C) Calcula la mediana de los Trumps Scores y la mediana de los Trump Margins. Tu código: Ejemplos de análisis con data frames En general, la forma de data frame nos es útil para correr análisis. Aquí un gráfico exploratorio (no miraremos demasiado la sintaxis): ggplot(data = df_trump_scores, mapping = aes(x = trump_margin, trump_score, color = party)) + geom_point() + scale_color_manual(values = c(&quot;blue&quot;, &quot;red&quot;)) Aquí una regresión lineal, que busca estimar el Trump Score de un senador/a de acuerdo a dos predictores: el margen de Trump en su estado y su partido político: mi_modelo &lt;- lm(trump_score ~ trump_margin + party, data = df_trump_scores) summary(mi_modelo) ## ## Call: ## lm(formula = trump_score ~ trump_margin + party, data = df_trump_scores) ## ## Residuals: ## Min 1Q Median 3Q Max ## -40.151 -1.952 1.599 4.487 17.239 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 15.71390 1.40190 11.209 &lt; 2e-16 *** ## trump_margin 0.17650 0.06248 2.825 0.00574 ** ## partyR 66.13619 2.50530 26.399 &lt; 2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 8.623 on 97 degrees of freedom ## Multiple R-squared: 0.9463, Adjusted R-squared: 0.9452 ## F-statistic: 854.5 on 2 and 97 DF, p-value: &lt; 2.2e-16 Listas Las listas son objetos que pueden contener otros objetos, sin importar su tipo! mi_lista &lt;- list(mi_objeto, mi_vector, df_trump_scores, mi_modelo) De la siguiente forma podemos acceder a los elementos de una lista, similar a lo que hicimos antes con vectores: mi_lista[3] ## [[1]] ## # A tibble: 100 x 5 ## last_name state party trump_score trump_margin ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Alexander TN R 80 26.0 ## 2 Blunt MO R 84.8 18.6 ## 3 Brown OH D 14.7 8.13 ## 4 Burr NC R 90.3 3.66 ## 5 Baldwin WI D 14.7 0.764 ## 6 Boozman AR R 88.2 26.9 ## 7 Blackburn TN R 93.9 26.0 ## 8 Barrasso WY R 91.2 46.3 ## 9 Bennet CO D 15.4 -4.91 ## 10 Blumenthal CT D 11.8 -13.6 ## # … with 90 more rows mi_lista[[3]] ## # A tibble: 100 x 5 ## last_name state party trump_score trump_margin ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Alexander TN R 80 26.0 ## 2 Blunt MO R 84.8 18.6 ## 3 Brown OH D 14.7 8.13 ## 4 Burr NC R 90.3 3.66 ## 5 Baldwin WI D 14.7 0.764 ## 6 Boozman AR R 88.2 26.9 ## 7 Blackburn TN R 93.9 26.0 ## 8 Barrasso WY R 91.2 46.3 ## 9 Bennet CO D 15.4 -4.91 ## 10 Blumenthal CT D 11.8 -13.6 ## # … with 90 more rows ¿Cuál es la diferencia entre estos dos últimos comandos? El primero devuelve una nueva lista con solo un elemento, el tercero de la lista original. El segundo, en tanto, devuelve el contenido del tercer elemento de la lista. Sintaxis de R Markdown En el texto de nuestros documentos podemos escribir en *cursiva* o **negrita**. También podemos insertar [links](https://www.google.com/). Usualmente cuando queremos hablar de paquetes o funciones dentro de nuestro texto los escribimos entre tildes invertidos: `tidyverse`, `mean()`. En el texto de nuestros documentos podemos escribir en cursiva o negrita. También podemos insertar links. Usualmente cuando queremos hablar de paquetes o funciones dentro de nuestro texto los escribimos entre tildes invertidos: tidyverse, mean(). Crear tablas también es relativamente simple. Con texto: Nombre | Descripción ------ | ----------- Juan | Un estudiante Marta | Una estudiante Nombre Descripción Juan Un estudiante Marta Una estudiante O a partir de un data frame, con código: ```{r} library(knitr) kable(head(df_trump_scores)) ``` last_name state party trump_score trump_margin Alexander TN R 80.00000 26.0057009 Blunt MO R 84.84848 18.6371170 Brown OH D 14.70588 8.1295744 Burr NC R 90.32258 3.6552285 Baldwin WI D 14.70588 0.7643432 Boozman AR R 88.23529 26.9209780 Importante. Por favor noten que la primera tabla ocupa sintaxis de R Markdown en vez de código de R, por lo que no está dentro de un chunk! También podemos incluir ecuaciones, escritas entre signos de peso con la sintaxis de \\(\\LaTeX\\). Un ejemplo: \\(\\hat{\\beta}=(X&#39;X)^{-1}X&#39;Y\\) ($\\hat{\\beta}=(X'X)^{-1}X'Y$). Título de prueba Subtítulo Se pueden generar el título y subtítulo de arriba con las siguientes líneas: # Título de prueba ## Subtítulo de prueba Una lista * Artículo de lista uno * Artículo de lista dos + Artículo derivado (nota los cuatro espacios antes del símbolo &quot;+&quot;). * Artículo de lista tres Artículo de lista uno Artículo de lista dos Artículo derivado (nota los cuatro espacios antes del símbolo “+”). Artículo de lista tres Otra lista (ahora ordenada) 1. Artículo de lista uno 1. Artículo de lista dos 1. Artículo de lista tres Artículo de lista uno Artículo de lista dos Artículo de lista tres Nota que los números de la lista aparecerán solos en el documento compilado. Una imagen Podemos insertar una imagen, referenciando su ubicación en nuestra carpeta del proyecto: ![](imgs/imagen_ejemplo.png) Compilar nuestro documento Podemos compilar nuestro código a un documento utilizando el botón “Knit” en RStudio, o presionando Ctrl/Cmd + Shift + K. (Ejercicios D y E) Crea un vector numérico, que vaya desde 4 hasta 109. Luego, calcula su media y mediana. Recuerda crear tu(s) chunk(s) con Ctrl/Cmd + Alt + i. Para terminar, inserta la imagen “rstudio.png” de la carpeta “imgs” en este documento, después de un subtítulo “Mi imagen”. Aprovecha de describirla brevemente, haciendo uso de la negrita para destacar palabras. Siguiente script Pasemos brevemente a ver el script 01b. Nota: este es un script .R, cuyo contenido es el siguiente: # Brevemente, este es un script &quot;tradicional&quot; de R, sin R Markdown. # La extensión es .R. # Nota que aquí los comentarios van con # inicial, pues se asume que todo el resto es código. # Podemos hacer exactamente lo mismo que en el formato de R Markdown, con (al menos) ## dos diferencias. Primero, el código se correrá en la consola, no inmediatamente después ## de cada comando. Segundo, no se puede compilar esto a un documento. 3 + 3 library(tidyverse) df_trump_scores &lt;- read_csv(&quot;datos/trump_scores_202003_cong116.csv&quot;) mean(df_trump_scores$trump_score) median(df_trump_scores$trump_score) # De todas formas, los scripts .R son útiles para cosas rápidas y mucha gente los ocupa. # En el curso ocuparemos mayoritariamente scripts .Rmd. "]
]
